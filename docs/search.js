window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "butterfly_viewer", "modulename": "butterfly_viewer", "kind": "module", "doc": "<p align=\"center\">\n  <big>\n    <a href=\"#download-and-install\">Download</a> \n    \u00b7\n    <a href=\"#tutorial\">Tutorial</a>\n    \u00b7\n    <a href=\"https://github.com/olive-groves/butterfly_viewer\">GitHub\u2197</a>\n    <br>\n    <a href=\"https://olive-groves.github.io/butterfly_registrator/butterfly_registrator.html\"\">Butterfly Registrator\u2197</a>\n  </big>\n</p>\n\n<p align=\"center\">\n  <img src=\"images/viewer_sliding_overlay.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing a sliding overlay with three images being panned and zoomed.\">\n  <br />\n  <i>Sliding overlays\u00b9</i>\n</p>\n\n<p align=\"center\">\n  <img src=\"images/viewer_dragdrop_sync.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing image files loaded via drag-and-drop and then synchronously panned and zoomed.\">\n  <br />\n  <i>Synchronized pan and zoom\u00b9</i>\n</p>\n\n<p>Butterfly Viewer is a desktop multi-image viewer with sliding overlays, synchronized pan and zoom, and other handy features to rapidly compare local image files. This can be useful for visually inspecting painting research data such as high-res and raking-light photos, X-rays, and element maps from XRF and RIS.</p>\n\n<p>The Viewer runs as an <a href=\"#windows-executable\">installable Windows executable</a>, a <a href=\"#macos-app\">macOS app</a>, or directly on its <a href=\"#python\">Python source code</a>.</p>\n\n<p>Supported filetypes include PNG, JPG/JPEG, TIF/TIFF, BMP, WEBP, SVG, ICO, and CUR.</p>\n\n<p><a href=\"https://olive-groves.github.io/butterfly_registrator/butterfly_registrator.html\">Butterfly Registrator<sup>\u2197</sup></a> can be used to create aligned copies of your images so you can more accurately compare them in the Viewer. The Registrator helps you align (or <em>register</em>) images to a given reference image such that their heights and widths match and the features within those images line up.</p>\n\n<p><sup>\u00b9<em>Small Pear Tree in Blossom</em> by Vincent van Gogh. Credits: Van Gogh Museum, Amsterdam (Vincent van Gogh Foundation)</sup></p>\n\n<p align=\"center\">\n  <img src=\"images/viewer_eindhoven.jpg\" alt=\"Screenshot of the Butterfly Viewer showing six photographs arranged automatically as a grid.\">\n  <br />\n  <i>Auto-arranging side-by-side image windows</i>\n</p>\n\n<h1 id=\"download-and-install\">Download and install</h1>\n\n<p>You can download and install Butterfly Viewer to run:</p>\n\n<ul>\n<li>as a <a href=\"#windows-executable\">Windows executable</a>; </li>\n<li>as a <a href=\"#macos-app\">macOS app</a>; or </li>\n<li>directly with <a href=\"#python\">Python</a>. </li>\n</ul>\n\n<h2 id=\"windows-executable\">Windows executable</h2>\n\n<blockquote>\n  <p>Download: <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\"><code>butterfly_viewer_v1.y.z_win64_setup.exe.zip</code><sup>\u2197</sup></a></p>\n  \n  <p><sup> <strong>Restart recommended</strong> \u00b7 <strong>110 MB installed</strong></sup></p>\n</blockquote>\n\n<p>For Windows, Butterfly Viewer installs to your computer with an executable (.exe) installer similar to how other programs install on your computer. The Viewer will be added to your list of programs and optionally to your desktop as a shortcut.</p>\n\n<p>Here v1.0.0 is shown in the screenshots, but you should use the <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\">latest version</a> unless advised otherwise.</p>\n\n<p><img src=\"images/install/windows_shortcut.jpg\" alt=\"Butterfly Viewer shortcut and icon on Windows\" /></p>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<ul>\n<li><p>The Viewer uses 106 MB of storage space as an installed app.</p></li>\n<li><p>The Viewer uses locally stored images (like PNG, JPEG, TIFF) to create and explore views of those images. It's designed to be navigated by mouse or trackpad by clicking, dragging, and dropping.</p></li>\n<li><p>The Viewer doesn't use the internet, so any online images you wish to use must be locally available \u2014 for example, by downloading them or by selecting \u201calways keep on your device\u201d if they sync to cloud storage like OneDrive or Google Drive. Images on network shares can be loaded into the Viewer, but they can take more time to load than those stored locally, especially if accessing the share through a VPN.</p></li>\n</ul>\n\n<h3 id=\"download-zip\">Download ZIP</h3>\n\n<p>Download the Viewer from the latest release of the Viewer's GitHub repo, which is packaged as an installer under <em>Assets</em> as <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\"><code>butterfly_viewer_v1.y.z_win64_setup.exe.zip</code><sup>\u2197</sup></a>.</p>\n\n<p><img src=\"images/install/download_zip.jpg\" alt=\"Screenshot showing the download link of the Butterfly Viewer installer ZIP on its GitHub repo.\" />\n<br>\n<sup>Here v1.1 is shown, but you should download the <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\">latest version</a>.</sup></p>\n\n<h3 id=\"extract-zip\">Extract ZIP</h3>\n\n<p>Extract <code>butterfly_viewer_v1.y.z_win64_setup.exe</code> from the ZIP:</p>\n\n<ol>\n<li>Go to the folder where you downloaded the ZIP.</li>\n<li>Right-click the ZIP.</li>\n<li>Select <strong>Extract All...</strong> or another extraction tool (like 7-Zip).</li>\n</ol>\n\n<p><img src=\"images/install/extract_zip.jpg\" alt=\"Sequence of screenshots showing how to extract the Butterfly Viewer installer executable from the ZIP.\" /></p>\n\n<h3 id=\"run-installer\">Run installer</h3>\n\n<p><strong>Note:</strong> Your computer might block you from running the installer via double-click if you\u2019re using a work computer or otherwise don\u2019t have admin privileges:</p>\n\n<ul>\n<li>If you have no admin privileges, skip to <a href=\"#option-2-without-admin-privileges\">Option\u00a02</a>. </li>\n<li>If you indeed have admin privileges, just follow <a href=\"#option-1-with-admin-privileges\">Option\u00a01</a>.</li>\n</ul>\n\n<blockquote>\n  <p><em>Why is it unrecognized and blocked?  In short, it\u2019s because this installer has no certificate. If an installer's certificate isn't found by Windows when double-clicked, Windows will block it from immediately running.</em></p>\n</blockquote>\n\n<h4 id=\"installer-option-1-with-admin-privileges\">Installer option 1: With admin privileges</h4>\n\n<p>If you have admin privileges, run the installer by double-clicking on <code>butterfly_viewer_v1.y.z_win64_setup.exe</code>:</p>\n\n<ol>\n<li>Double-click on <code>butterfly_viewer_v1.y.z_win64_setup.exe</code>.</li>\n<li>Windows Defender SmartScreen may show a pop-up. If not, skip to step 5.</li>\n<li>Select <strong>More info</strong>.</li>\n<li>Select <strong>Run anyway</strong>.\n<br>\n<sup>No <strong>Run anyway</strong>? Select <strong>Don't run</strong> and <a href=\"#option-2-without-admin-privileges\">try Option\u00a02.</a></sup></li>\n<li>Wait for the installer to load. This may take a few seconds.</li>\n</ol>\n\n<p><img src=\"images/install/install_admin.jpg\" alt=\"Sequence of screenshots showing how to run the Butterfly Viewer installer by double-clicking it.\" /></p>\n\n<h4 id=\"installer-option-2-without-admin-privileges\">Installer option 2: Without admin privileges</h4>\n\n<p>If double-clicking the installer doesn\u2019t work, run the installer via the command prompt.</p>\n\n<blockquote>\n  <p><em>Not possible? You can try installing on a virtual machine or contacting your machine admin.</em></p>\n</blockquote>\n\n<p>You can find various ways online on how to run an executable (EXE) via the command prompt, but I prefer these steps:</p>\n\n<ol>\n<li>Copy the path of the installer:\n<ul>\n<li>Press and hold the <code>Shift</code> key and then <strong>right-click</strong> the file. Wait for the menu to load.</li>\n<li>Select <strong>Copy as path</strong>.</li>\n</ul></li>\n</ol>\n\n<ol start=\"2\">\n<li>Open the Start menu  (<code>\u229e Win</code>).</li>\n<li>Type <strong>cmd</strong>.</li>\n<li>Press the <code>Enter</code> key or select the Command Prompt app.</li>\n<li>Paste into the prompt the installer path you copied with <code>Ctrl\u00b7V</code>.</li>\n<li>Run by pressing <code>Enter</code>. </li>\n<li>Wait for the installer to load. This may take a few seconds.</li>\n</ol>\n\n<p><img src=\"images/install/install_cmd.jpg\" alt=\"Sequence of screenshots showing how to run the Butterfly Viewer installer with the command prompt.\" />   </p>\n\n<h3 id=\"follow-installer-steps-and-install\">Follow installer steps and install</h3>\n\n<p>Once the installer loads, follow the onscreen steps to install the Viewer:</p>\n\n<ul>\n<li>Accept the agreement. The license is <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\">GNU GPL v3.0<sup>\u2197</sup></a> or later.</li>\n<li>Choose the install folder. The default should be ok.\n<br></li>\n</ul>\n\n<blockquote>\n  <p>*Updating with a newer version? First <a href=\"#uninstall\">uninstall the old version</a> and then re-run the new installer.</p>\n</blockquote>\n\n<ul>\n<li>Choose the Start Menu folder. The default should be ok, but you don't need to create a Start Menu folder to use the app.</li>\n<li>Choose to create a desktop shortcut. This can be useful to have.</li>\n<li>Install.</li>\n<li>Restart. <strong>Restart recommended</strong> to avoid issues with drag-and-drop not working.</li>\n</ul>\n\n<p><img src=\"images/install/install_installer.jpg\" alt=\"Two screenshots of the Butterfly Viewer installer: 1) the first page showing the license agreement, and 2) the final page confirming a completed install.\" />   </p>\n\n<h3 id=\"run\">Run</h3>\n\n<p>To run the Viewer, search for <strong>Butterfly Viewer</strong> in the Start menu (<code>\u229e Win</code>) or double-click on the desktop shortcut if you added it upon install.</p>\n\n<p><a href=\"#tutorial\">Follow the tutorial</a> to learn the Viewer's features.</p>\n\n<p><img src=\"images/tutorial/start_viewer.jpg\" alt=\"Sequence of screenshots showing a Start menu search for &quot;Butterfly Viewer&quot; with the installed app as the first result and the app's desktop shortcut, with arrows from both pointing at the Viewer's empty startup screen.\" /></p>\n\n<h3 id=\"uninstall\">Uninstall</h3>\n\n<p>You can uninstall the Viewer executable from Windows by going to <strong>Add or remove programs</strong> via the Start menu, selecting <strong>Butterfly Viewer</strong>, and then selecting <strong>Uninstall</strong>. </p>\n\n<hr />\n\n<h2 id=\"macos-app\">macOS app</h2>\n\n<blockquote>\n  <p>Download: <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\"><code>butterfly_viewer_v1.y.z_macOS.app.zip</code><sup>\u2197</sup></a></p>\n  \n  <p><sup><strong>110 MB installed</strong></sup></p>\n</blockquote>\n\n<p>For macOS, Butterfly Viewer installs to your computer with an app file which you drag into Applications. The Viewer can then be started directly from Launchpad.</p>\n\n<h3 id=\"prerequisites-2\">Prerequisites</h3>\n\n<p>MacOS High Sierra is used to create the macOS app, so versions 10.13.6 and newer should be supported. </p>\n\n<p>Other prerequisites are the <a href=\"#prerequisites\">same as the Windows executable</a>.</p>\n\n<h3 id=\"download-zip-2\">Download ZIP</h3>\n\n<p>Download the Viewer from the latest release of the Viewer's GitHub repo, which is packaged as an app under <em>Assets</em> as <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\"><code>butterfly_viewer_v1.y.z_macOS.app.zip</code><sup>\u2197</sup></a>.</p>\n\n<p><img src=\"images/install/download_zip.jpg\" alt=\"Screenshot showing the download link of the Butterfly Viewer app ZIP on its GitHub repo.\" />\n<br>\n<sup>Here v1.1 is shown, but you should download the <a href=\"https://github.com/olive-groves/butterfly_viewer/releases/latest\">latest version</a>.</sup></p>\n\n<h3 id=\"add-to-applications-and-launchpad\">Add to Applications and Launchpad</h3>\n\n<p>These steps are necessary to run Butterfly Viewer directly from Launchpad:</p>\n\n<ul>\n<li><p>In Finder, go to Downloads. If not already unzipped, unzip the ZIP by double-clicking the file.</p></li>\n<li><p>Drag <code>Butterfly Viewer</code> into Applications.</p></li>\n<li><p>Go to Applications (<strong><em>not</em> Launchpad</strong>). </p></li>\n<li><p>In Applications, control-click (right-click) on Butterfly Viewer, then click Open.</p></li>\n</ul>\n\n<blockquote>\n  <p>A warning will likely pop up from Apple saying it can't be checked. <strong>Click Open anyway</strong>.</p>\n  \n  <p><em>Why?  In short, it\u2019s because this app has no certificate.</em></p>\n</blockquote>\n\n<h3 id=\"run-2\">Run</h3>\n\n<p>To run the Viewer, open Launchpad and click on <strong>Butterfly Viewer</strong>.</p>\n\n<p><img src=\"images/install/macOS.png\" alt=\"Screenshot of Butterfly Viewer on macOS.\" /></p>\n\n<h3 id=\"uninstall-2\">Uninstall</h3>\n\n<p>You can uninstall the Viewer app from macOS by going to Applications and dragging <strong>Butterfly Viewer</strong> to Trash. </p>\n\n<hr />\n\n<h2 id=\"python\">Python</h2>\n\n<p>Butterfly Viewer also runs directly on its Python source code, available from its <a href=\"https://github.com/olive-groves/butterfly_viewer\">GitHub repo<sup>\u2197</sup></a>:</p>\n\n<pre><code>python butterfly_viewer.py\n</code></pre>\n\n<h3 id=\"requirements\">Requirements</h3>\n\n<p>The list of dependencies are in <code>environment.yml</code> in the root directory, which includes:</p>\n\n<ul>\n<li>Python 3.6 (tested with Python 3.6.13) </li>\n<li>PyQt 5.9 (tested with PyQt 5.9.2)</li>\n<li>piexif</li>\n</ul>\n\n<h3 id=\"install-and-run\">Install and run</h3>\n\n<p>There are a couple ways to run the Viewer with Python. Here's one way using conda (<a href=\"https://anaconda.org/\">anaconda.org<sup>\u2197</sup></a>):</p>\n\n<ol>\n<li>Clone Butterfly Viewer from its <a href=\"https://github.com/olive-groves/butterfly_viewer\">GitHub repo<sup>\u2197</sup></a> or simply download the source code as a ZIP and extract it.</li>\n<li>Note the root directory <code>C:\\path\\to\\the\\butterfly_viewer\\</code>.</li>\n<li><p>Open Anaconda Prompt and change the directory to the root directory.</p>\n\n<pre><code>cd C:\\path\\to\\the\\butterfly_viewer\\\n</code></pre></li>\n<li><p>If using Windows, create a new conda environment in a new subfolder named <code>env</code> using the <code>environment.yml</code> file from the root directory.</p>\n\n<pre><code>conda env create --file environment.yml --prefix ./env\n</code></pre>\n\n<p>If using macOS or Linux, create a new conda environment named <code>env</code> manually:</p>\n\n<pre><code>conda config --append channels conda-forge\nconda create --prefix ./env python=3.7\nconda activate ./env\nconda install pyqt=5.9\nconda install piexif\n</code></pre></li>\n<li><p>Activate the <code>env</code> environment.</p>\n\n<pre><code>conda activate ./env\n</code></pre></li>\n<li><p>Change directory to the source subfolder.</p>\n\n<pre><code>cd butterfly_viewer\n</code></pre></li>\n<li><p>Run Butterfly Viewer.</p>\n\n<pre><code>python butterfly_viewer.py\n</code></pre></li>\n</ol>\n\n<h1 id=\"tutorial\">Tutorial</h1>\n\n<blockquote>\n  <p>Sample images: <a href=\"https://github.com/olive-groves/butterfly_images/archive/refs/tags/v1.0.zip\"><code>butterfly_images-1.0.zip</code><sup>\u2197</sup></a> \u00b7 <strong>121 MB</strong></p>\n  \n  <p><sup><strong>Credits: Van Gogh Museum, Amsterdam (Vincent van Gogh Foundation)</strong> \u00b7 <strong>133 MB extracted</strong></sup></p>\n</blockquote>\n\n<p>This tutorial guides you through the Butterfly Viewer's main features using a stack of sample technical images of Vincent van Gogh's <em>Small Pear Tree in Blossom</em>.</p>\n\n<h2 id=\"download-sample-van-gogh-images\">Download sample Van Gogh images</h2>\n\n<p>Download the <a href=\"https://github.com/olive-groves/butterfly_images/archive/refs/tags/v1.0.zip\">ZIP of sample technical images<sup>\u2197</sup></a> (<strong>121 MB</strong>) of <em>Small Pear Tree in Blossom</em> by Vincent van Gogh, with credits to the Van Gogh Museum, Amsterdam (Vincent van Gogh Foundation).</p>\n\n<p>Extract the ZIP and open the folder of images. <sup>How to: <a href=\"#extract-zip\">Extract a ZIP</a></sup></p>\n\n<p><img src=\"images/tutorial/images_folder.jpg\" alt=\"Screenshot of the images folder from the downloaded sample ZIP.\" /></p>\n\n<h2 id=\"synchronized-side-by-side-images\">Synchronized side-by-side images</h2>\n\n<p align=\"center\">\n  <img src=\"images/viewer_dragdrop_sync.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing image files loaded via drag-and-drop and then synchronously panned and zoomed.\">\n  <br />\n  <i>Synchronized pan and zoom</i>\n</p>\n\n<p>Let's compare individual images side-by-side with synchronous movement and discover some basic features of the Viewer along the way.</p>\n\n<p>First, start the Viewer.</p>\n\n<ul>\n<li>If you installed the Windows executable, search for <strong>Butterfly Viewer</strong> in the Start menu (<code>\u229e Win</code>) or double-click on its desktop shortcut. \n<br><sup>How to: <a href=\"#run\">Run installed executable</a></sup></li>\n<li>If you're using Python, execute <code>python butterfly_viewer</code>.\n<br><sup>How to: <a href=\"#install-and-run\">Run on Python</a></sup></li>\n</ul>\n\n<p><img src=\"images/tutorial/viewer_started.jpg\" alt=\"Screenshot of the Viewer's empty startup screen.\" /></p>\n\n<p>We can hide the advanced features on the left because we're doing simple image comparison. </p>\n\n<p>Hide the interface by clicking <img src=\"images/tutorial/hide_interface_button.png\" alt=\"Hide interface button\" />.</p>\n\n<p><img src=\"images/tutorial/hide_interface.jpg\" alt=\"Screenshots showing the Viewer's interface visible and hidden.\" /></p>\n\n<p>Let's add our first image: the color photograph of <em>Small Pear Tree in Blossom</em>.</p>\n\n<p>Click and drag <code>s0039V1962_b_crop.png</code> from the sample images folder into the Viewer\u2019s main area.</p>\n\n<blockquote>\n  <p><strong>Drag-and-drop not working?</strong> \n  Try restarting your computer and reopening the Viewer. </p>\n  \n  <p>Some users report this solves issues with images not being droppable.</p>\n</blockquote>\n\n<p><img src=\"images/tutorial/drag_single.jpg\" alt=\"Screenshot showing the color image file dragged into the Viewer's main area.\" /></p>\n\n<p><img src=\"images/tutorial/viewer_single.jpg\" alt=\"Screenshot showing the color image in the Viewer as a single individual image window.\" /></p>\n\n<p>Now let's add two more images to compare them: a raking light photograph and a zinc element map created using X-ray fluorescence mapping.</p>\n\n<p>Click and drag these files into the Viewer:</p>\n\n<ul>\n<li><code>s0039v1962_r2_registered_to_s0039V1962_b_crop.png</code>; and </li>\n<li><code>s0039V1962_Zn_MAXRF_registered_to_s0039V1962_b_crop.png</code>.</li>\n</ul>\n\n<p><img src=\"images/tutorial/drag_multiple.jpg\" alt=\"Screenshots showing the raking light and zinc map dragged into the Viewer's main area.\" /></p>\n\n<p>Clicking and dragging image files directly into the Viewer creates an individual image window for each image and automatically arranges them side-by-side. </p>\n\n<p>Images are arranges horizontally (left to right) by default, but you arrange them vertically or as a grid using the interface buttons on the bottom right of the Viewer. </p>\n\n<p><img src=\"images/tutorial/arrange_buttons.jpg\" alt=\"Arrange and fit interface buttons\" />.</p>\n\n<p>Zoom (scroll) and pan (left-click drag) to explore the images synchronously.</p>\n\n<p><img src=\"images/viewer_dragdrop_sync.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing image files loaded via drag-and-drop and then synchronously panned and zoomed.\" /></p>\n\n<p>Can you find this specific blossom in the pear tree?</p>\n\n<p><img src=\"images/tutorial/zoom_blossom.jpg\" alt=\"Screenshot showing the Viewer with three synchronous views zoomed to a blossom in the sample image.\" /></p>\n\n<p>Try the shortcut to center and fit the image windows by clicking <img src=\"images/tutorial/fit_center_button.png\" alt=\"Fit and center button\" />.</p>\n\n<p><img src=\"images/tutorial/fit_center.jpg\" alt=\"Screenshot showing the Viewer with three synchronous views fitted and centered.\" /></p>\n\n<p>Once you're done exploring the images, close them and unhide the interface.</p>\n\n<p>Close all image windows with <img src=\"images/tutorial/close_all_button.png\" alt=\"Close all views button\" />. </p>\n\n<p>Show the interface with <img src=\"images/tutorial/show_interface_button.png\" alt=\"Fit and center button\" />.</p>\n\n<p><img src=\"images/tutorial/close_all_unhide_interface.jpg\" alt=\"Screenshot showing the all windows in the Viewer closed and the interface unhidden.\" /></p>\n\n<h2 id=\"sliding-overlays-and-opacity-sliders\">Sliding overlays and opacity sliders</h2>\n\n<p align=\"center\">\n  <img src=\"images/viewer_sliding_overlay.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing a sliding overlay with three images being panned and zoomed.\">\n  <br />\n  <i>Sliding overlays</i>\n</p>\n\n<p>Now let's use sliding overlays to compare the sample images we viewed side-by-side in the previous section. We'll also reveal opacity sliders and other features of the Viewer.</p>\n\n<p>First, make sure the Viewer is started with the interface showing.</p>\n\n<p><img src=\"images/tutorial/viewer_started.jpg\" alt=\"Screenshot of the Viewer's empty startup screen.\" /></p>\n\n<p>The 2\u00d72 interface in the top-left corner of the Viewer lets us create an image window with a sliding overlay. </p>\n\n<p>The concept of a sliding overlay is like a before-and-after slider but in two dimensions, allowing us to place up to three images over a base image and compare their contents all at the same point by sliding the cursor up, down, left, and right.</p>\n\n<p><img src=\"images/tutorial/sliding_overlay_concept.jpg\" alt=\"Sliding overlay concept with a color photo of Small Pear Tree in Blossom as the base image with a raking light photo overlaid in the top-right and a zinc element map overlaid in the bottom-right.\" /></p>\n\n<p>For the base image of our first sliding overlay, we'll use the color photograph of <em>Small Pear Tree in Blossom</em>. This acts as a \"ground truth\" with which we can compare overlaid images.</p>\n\n<p>Drag and drop <code>s0039v1962_b_crop.png</code> from the sample images into the top-left tile of the sliding overlay creator. </p>\n\n<p><img src=\"images/tutorial/creator_base.jpg\" alt=\"Screenshot showing the color photo being dragged into the top-left base tile of the Viewer's sliding overlay creator.\" /></p>\n\n<p>The other tiles in the creator are now unlocked because a base image is present, so let's add the raking light photograph and a zinc element map.</p>\n\n<p>Individually click and drag these files into the creator:</p>\n\n<ul>\n<li>top-right tile: <code>s0039v1962_r2_registered_to_s0039V1962_b_crop.png</code>; and </li>\n<li>bottom-right tile: <code>s0039V1962_Zn_MAXRF_registered_to_s0039V1962_b_crop.png</code>.</li>\n</ul>\n\n<blockquote>\n  <p>To accurately compare images with a sliding overlay in the Viewer, those images must already be registered with one another. That means their aspect ratios must match, and the features within those images must be aligned.</p>\n  \n  <p>The sample images here are already registered. If you want to easily create registered copies of your own images, check out <a href=\"https://olive-groves.github.io/butterfly_registrator/butterfly_registrator.html\">Butterfly Registrator<sup>\u2197</sup></a>.</p>\n</blockquote>\n\n<p><img src=\"images/tutorial/creator_topright_bottomright.jpg\" alt=\"Screenshot indicating where in the sliding overlay creator to click and drag the raking light photo (top-right) and zinc element map (bottom-right).\" /></p>\n\n<p>Now we can create a sliding overlay using the files we added.</p>\n\n<p>Click Create to generate an image window with a sliding overlay.</p>\n\n<p><img src=\"images/tutorial/creator_create.jpg\" alt=\"Screenshots showing a sliding overlay being created with the previously selected images.\" /></p>\n\n<p>Move your cursor across the window to change the position of the \"split\" of the sliding overlay. </p>\n\n<p>The split is unlocked by default, meaning it will continuously follow your cursor.</p>\n\n<p><img src=\"images/viewer_sliding_overlay.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing a sliding overlay with three images being panned and zoomed.\" /></p>\n\n<p>Zoom to the blossoms in the top-right of the pear tree.</p>\n\n<p><img src=\"images/tutorial/sliding_overlay_zoom.jpg\" alt=\"Screenshots showing a zoom section of the sliding overlay.\" /></p>\n\n<p>The sliders in the interface in the bottom-left corner of the Viewer let us adjust the opacities of the active sliding overlay.</p>\n\n<p>Since the raking light image is directly over the base color image, we can blend in the color image by decreasing the opacity of the raking light image. In other words, we can make the raking light image semi-transparent and let in the color image underneath.</p>\n\n<p>Drag the opacity slider of the top-right image to about 60%.</p>\n\n<p><img src=\"images/tutorial/opacity_slider.jpg\" alt=\"Screenshot show the top-right opacity slider dragged to 60%.\" /></p>\n\n<p>To more easily examine the blended images, we can lock the split of the sliding overlay.</p>\n\n<p>First, pan and zoom the window such that you can place the cursor at the bottom-left the brick wall. </p>\n\n<p>Lock the split at the cursor position by pressing <code>Shift\u00b7X</code> on your keyboard.</p>\n\n<p><img src=\"images/tutorial/split_lock.jpg\" alt=\"Screenshots showing the split of the sliding overlay before and after being locked.\" /></p>\n\n<p>Pan and zoom to the brick wall.</p>\n\n<p>Again move the opacity slider of the top-right image, this time left and right to reveal the brush strokes of Van Gogh.</p>\n\n<p><img src=\"images/tutorial/opacity_slider_lock.jpg\" alt=\"Screenshots showing the opacity of the raking light image being changed with the sliding overlay split locked.\" /></p>\n\n<p>Fit and center the image window.</p>\n\n<p>Unlock the split by pressing <code>Shift\u00b7X</code> or by clicking Unlock Overlay.</p>\n\n<p><img src=\"images/tutorial/split_unlock.jpg\" alt=\"Screenshots showing the split of the sliding overlay being unlocked.\" /></p>\n\n<p>You can also try blending the zinc element map with the color image using the opacity slider, though in the next section we'll instead use alphascale versions of the element maps (not grayscale versions) to better visualize them over the color image.</p>\n\n<p>Close the image window of the sliding overlay with X in the top-right corner.</p>\n\n<p>Clear the tiles of the sliding overlay creator with their respective X.</p>\n\n<p><img src=\"images/tutorial/close_window_clear_creator.jpg\" alt=\"Screenshots showing the sliding overlay image window being closed and the tiles of the creator being cleared.\" /></p>\n\n<h2 id=\"alphascale-maps-with-sliding-overlays\">Alphascale maps with sliding overlays</h2>\n\n<p align=\"center\">\n  <img src=\"images/viewer_alphascale_overlay.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing a sliding overlay with four alphascale element maps being panned and zoomed.\">\n  <br />\n  <i>Alphascale maps in a sliding overlay</i>\n</p>\n\n<p>Here we're going to use alphascale versions of the XRF element maps to better compare them with the color photo of <em>Small Pear Tree in Blossom</em>. We'll use a sliding overlay as in the previous section, and also cover some more features of the Viewer.</p>\n\n<p>First, make sure the Viewer is started with the interface showing.</p>\n\n<p><img src=\"images/tutorial/viewer_started.jpg\" alt=\"Screenshot of the Viewer's empty startup screen.\" /></p>\n\n<p>We'll again use the color photograph of <em>Small Pear Tree in Blossom</em> as the base image of the sliding overlay.</p>\n\n<p>Then we'll add the alphascale versions of the bromine, chromium, and zinc element maps included in the sample images.</p>\n\n<blockquote>\n  <p>Alphascale is a term we use to refer to a grayscale image converted such that the transparency of each pixel (<em>the alpha channel</em>) is proportional to how black or white the original grayscale pixel is. Details <a href=\"#what-is-alphascale\">here</a>. Use the <a href=\"https://olive-groves.github.io/butterfly_registrator/butterfly_registrator.html\">alphascale creator</a> in Butterfly Registrator to convert your own grayscale maps to alphascale.</p>\n  \n  <p><br> </p>\n  \n  <p><img src=\"images/tutorial/alphascale.png\" alt=\"Gradient bar from white to black in grayscale, white alphascale, and red alphacale.\" /></p>\n</blockquote>\n\n<p>Individually click and drag these files into the creator, and then click Create:</p>\n\n<ul>\n<li>top-left (base) tile: <code>s0039V1962_b_crop.png</code>;</li>\n<li>top-right tile: <code>s0039V1962_Br_MAXRF_alphascale_rgb_255_0_0_registered_to_s0039V1962_b_crop.png</code>;  </li>\n<li>bottom-right tile: <code>s0039V1962_Cr_MAXRF_alphascale_rgb_0_255_0_registered_to_s0039V1962_b_crop.png</code>; and</li>\n<li>bottom-left tile: <code>s0039V1962_Zn_MAXRF_alphascale_rgb_255_255_255_registered_to_s0039V1962_b_crop.png</code>.</li>\n</ul>\n\n<p><img src=\"images/tutorial/creator_alphascale.jpg\" alt=\"Screenshot of the Viewer's empty startup screen.\" /></p>\n\n<p>If you want to quickly see each element map as a whole over the color image, you can use the interface grid of buttons in the bottom-left of the Viewer to temporarily move the sliding overlay to the edges of the image window.</p>\n\n<p>Hover over (don't click!) the split shortcut arrows to temporarily move the split.</p>\n\n<p><img src=\"images/tutorial/split_shortcut.jpg\" alt=\"Screenshots showing the split moving when the split shortcut buttons are hovere.\" /></p>\n\n<p>By reducing the opacity of the base color image \u2014 in other words, by making the base image semi-transparent \u2014 we can make the colors of the alphascale maps \"pop\" and as a result make it easier to see where their respective elements are present in <em>Small Pear Tree in Blossom</em>.</p>\n\n<p>Drag the opacity slider of the base image to about 40%.</p>\n\n<p><img src=\"images/tutorial/opacity_slider_base.jpg\" alt=\"Screenshots showing the opacity of the base color image being changed.\" /></p>\n\n<p>Can you find this area in the painting?</p>\n\n<p><img src=\"images/viewer_alphascale_overlay.gif\" alt=\"Animated screencapture of the Butterfly Viewer showing a sliding overlay with four alphascale element maps being panned and zoomed.\" /></p>\n\n<p>The Viewer can handle multiple simultaneous image windows with individual images and sliding overlays, all while synchronizing panning and zooming.</p>\n\n<p>Try out other handy features of the Viewer:</p>\n\n<ul>\n<li>Toggle sync on/off with <img src=\"images/tutorial/sync_button.png\" alt=\"Sync toggle button\" />.</li>\n<li>Go fullscreen by pressing the <code>F</code> key or with <img src=\"images/tutorial/fullscreen_button.png\" alt=\"Fullscreen button\" />.</li>\n<li>Copy a screenshot to your clipboard with Ctrl\u00b7C or save it as an image with <img src=\"images/tutorial/screenshot_button.png\" alt=\"Save screenshot button\" />.</li>\n<li>Explore other settings and tools by right-clicking an image window.</li>\n</ul>\n\n<p>Lastly, can you create a set of image windows like this?</p>\n\n<p><img src=\"images/tutorial/viewer_multi.jpg\" alt=\"Screenshot showing multiple image windows open in the Viewer.\" /></p>\n\n<p><img src=\"images/tutorial/viewer_multi_unsync.jpg\" alt=\"Screenshot showing multiple image windows at various zoom and positions.\" /></p>\n\n<p>Once finished, close the Viewer \u2014 or explore it further using your own images!</p>\n\n<h2 id=\"set-zoom-synchronization-mode\">Set zoom synchronization mode</h2>\n\n<p><img src=\"images/sync_by_modes.gif\" alt=\"Screenshots showing sync by fit-in-a-box, width, height, and pixel.\" /></p>\n\n<p>Zoom can be synchronized by one of four modes by right-clicking an image and selecting the mode under <strong>Sync zoom by</strong>:</p>\n\n<ul>\n<li><p>Fit in a box (default): images are scaled to fit to the same sized square box.</p></li>\n<li><p>Width: images are scaled to appear equally as wide.</p></li>\n<li><p>Height: images are scaled to appear equally as tall.</p></li>\n<li><p>Pixel (relative size): images are not scaled whereby pixels between images are the same size.</p></li>\n</ul>\n\n<p><img src=\"images/tutorial/right-click_sync_zoom.jpg\" alt=\"Screenshot showing right-click menu with the 'Sync zoom by...' submenu selected.\" /></p>\n\n<p>Sliding overlays scale their non-base images using the fit-in-a-box method.</p>\n\n<p><img src=\"images/viewer_sliding_overlay_scaling.gif\" alt=\"Animated screencapture showing a sliding overlay with the same image at four different resolutions.\" /></p>\n\n<h1 id=\"common-questions\">Common questions</h1>\n\n<h2 id=\"report-a-bug\">Report a bug?</h2>\n\n<p>You can submit a <a href=\"https://github.com/olive-groves/butterfly_viewer/issues/new/choose\">bug report<sup>\u2197</sup></a> as an issue on the Viewer's GitHub.</p>\n\n<h2 id=\"request-new-feature\">Request new feature?</h2>\n\n<p>You can submit a <a href=\"https://github.com/olive-groves/butterfly_viewer/issues/new/choose\">feature request<sup>\u2197</sup></a> as an issue on the Viewer's GitHub.</p>\n\n<p><img src=\"images/tutorial/bug_feature_issue.jpg\" alt=\"GitHub New Issue page showing bug report and feature request options.\" /></p>\n\n<h2 id=\"seeing-pixelated-images\">Seeing pixelated images?</h2>\n\n<p><img src=\"images/tutorial/upsample_rightclick.jpg\" alt=\"Screenshot showing upsample smoothing options in the right-click menu.\" /></p>\n\n<p>By default, the Viewer does not smooth the pixels of images when you overzoom them. Smoothing is turned off to show you precisely where individual pixels are, which is otherwise difficult to do with it on. As a result, this can cause images to appear pixelated \u2014 which is true, because you're seeing the exact pixels.</p>\n\n<p>You can toggle smoothing (<em>upsampling</em>) through the right-click menu on any image window.</p>\n\n<h2 id=\"what-is-alphascale\">What is alphascale?</h2>\n\n<p>Alphascale is a term we use to refer to a grayscale image converted such that the transparency of each pixel (<em>the alpha channel</em>) is proportional to how black or white the original grayscale pixel is. The color of each pixel in the alphascale image is then set to the same color, like white or red.</p>\n\n<p><img src=\"images/tutorial/alphascale.png\" alt=\"Gradient bar from white to black in grayscale, white alphascale, and red alphacale.\" /></p>\n\n<p>For grayscale XRF maps converted to alphascale, this means the transparency represents the presence of an element: an opaque (non-transparent) pixel indicates the highest relative presence, whereas a see-through (transparent) pixel indicates the lowest relative presence. In other words, where in an 8-bit grayscale map white is high (255) and black is low (0), in its alphascale counterpart fully opaque is high (alpha=255) and fully transparent is low (alpha=0).</p>\n\n<p>If you want to create alphascale versions of your own grayscale maps, check out <a href=\"https://olive-groves.github.io/butterfly_registrator/butterfly_registrator.html\">Butterfly Registrator<sup>\u2197</sup></a>.</p>\n\n<h1 id=\"developers\">Developers</h1>\n\n<h2 id=\"contributing-to-butterfly_viewer\">Contributing to <code>butterfly_viewer</code></h2>\n\n<p>You can contribute to <code>butterfly_viewer</code> with a pull request by following these steps:</p>\n\n<ol>\n<li>Fork the <a href=\"https://github.com/olive-groves/butterfly_viewer\">repo<sup>\u2197</sup></a>.</li>\n<li>Create a branch: <code>git checkout -b &lt;branch_name&gt;</code>.</li>\n<li>Make your changes and commit them: <code>git commit -m '&lt;commit_message&gt;'</code></li>\n<li>Push to the original branch: <code>git push origin &lt;project_name&gt;/&lt;location&gt;</code></li>\n<li>Create the pull request.</li>\n</ol>\n\n<p>Or see the GitHub documentation on <a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\">creating a pull request<sup>\u2197</sup></a>.</p>\n\n<h2 id=\"adding-and-changing-icons\">Adding and changing icons</h2>\n\n<p>To add or change icons (like SVG files) to Viewer, you need to add them first to a resources file following these steps:</p>\n\n<ul>\n<li>Add/change the files in <code>butterfly_viewer/icons</code></li>\n<li>Add/change the corresponding files in <code>icons.qrc</code></li>\n<li>In Anaconda Prompt:\n<ul>\n<li>Activate the standard <code>./env</code> environment</li>\n<li>Change directory to the source code <code>butterfly_viewer</code></li>\n<li>Run <code>pyrcc5 icons.qrc -o icons_rc.py</code></li>\n</ul></li>\n<li>Update the code referencing the icons</li>\n</ul>\n\n<h2 id=\"creating-the-executable-and-setup-installer\">Creating the executable and setup installer</h2>\n\n<p>The installer executable for Butterfly Viewer is created by first bundling the app with PyInstaller and then creating a setup installer with Inno Setup.</p>\n\n<h3 id=\"install-pyinstaller\">Install PyInstaller</h3>\n\n<p>PyInstaller must be installed with the same packages as the environment of the Butterfly Viewer to bundle a functioning dist and executable.</p>\n\n<p>With <code>conda</code> you can do this by cloning the environment you use for Viewer, activating that clone, and then installing PyInstaller. </p>\n\n<h4 id=\"cloning-from-env-subfolder\">Cloning from <code>env</code> subfolder</h4>\n\n<p>If you use an <code>env</code> subfolder in the root of <code>butterfly_viewer</code> for your Viewer environment, first open Anaconda Prompt and change the directory to the root directory.</p>\n\n<pre><code>cd C:\\path\\to\\the\\butterfly_viewer\\\n</code></pre>\n\n<p>Clone the environment into a new subfolder named <code>env_installer</code>, using the full directory of <code>env</code> in the command.</p>\n\n<pre><code>conda create --prefix ./env_installer --clone C:\\path\\to\\the\\butterfly_viewer\\env\n</code></pre>\n\n<p>Activate the environment.</p>\n\n<pre><code>conda activate ./env_installer\n</code></pre>\n\n<h4 id=\"cloning-from-environmentyml\">Cloning from <code>environment.yml</code></h4>\n\n<p>You can also create and activate a clone of the environment directly from the <code>environment.yml</code> in the root directory of <code>butterfly_viewer</code>:</p>\n\n<p>into a subfolder;</p>\n\n<pre><code>conda env create --file environment.yml --prefix ./env_installer\nconda activate ./env_installer\n</code></pre>\n\n<p>or in a new named environment.</p>\n\n<pre><code>conda env create --file environment.yml --name viewer_installer\nconda activate viewer_installer\n</code></pre>\n\n<h4 id=\"install\">Install</h4>\n\n<p>With the installer environment activated, install PyInstaller:</p>\n\n<pre><code>conda install pyinstaller\n</code></pre>\n\n<h3 id=\"run-pyinstaller-to-bundle-butterfly-viewer\">Run PyInstaller to bundle Butterfly Viewer</h3>\n\n<p>Run PyInstaller with the following command while in the <strong>source code</strong> directory <code>\\butterfly_viewer\\butterfly_viewer</code>.</p>\n\n<p>Windows:</p>\n\n<pre><code>pyinstaller --onedir --windowed --icon=icons\\icon.ico butterfly_viewer.py\n</code></pre>\n\n<p>macOS:</p>\n\n<pre><code>pyinstaller --windowed --icon=icons/icon.icns butterfly_viewer.py\n</code></pre>\n\n<blockquote>\n  <p>PyInstaller not working? Make sure you've changed directory to the source code directory (the subfolder <code>butterfly_viewer</code> within the repo itself).</p>\n</blockquote>\n\n<p>The executable runs fastest when not bundled into one file (otherwise it needs to unpack all packages on each startup), so we enforce the default <code>--onedir</code>. We also enforce <code>--windowed</code> to prevent the console window from opening when the executable runs. We add the app icon with the <code>--icon</code> argument.</p>\n\n<h3 id=\"use-inno-setup-to-create-a-setup-installer\">Use Inno Setup to create a setup installer</h3>\n\n<p>Steps to use Inno Setup are not yet documented.</p>\n\n<h2 id=\"generating-documentation-with-pdoc\">Generating documentation with pdoc</h2>\n\n<p>The docs branch is exclusively for generating documentation with pdoc.</p>\n\n<p>In other words, it is a one-way street to docs: only pull main into docs; never pull docs into main.</p>\n\n<blockquote>\n  <p>Note: We use <a href=\"https://pdoc.dev/\">pdoc</a>, <em>not</em> pdoc3.</p>\n</blockquote>\n\n<h3 id=\"0-pull-main-into-docs\">0. Pull main into docs</h3>\n\n<p>Bring the latest code into the docs branch with a pull request main>docs.</p>\n\n<h3 id=\"1-checkout-docs-branch\">1. Checkout docs branch</h3>\n\n<p>Checkout the docs branch.</p>\n\n<h3 id=\"2-open-conda-and-change-directory-to-the-root-folder-of-butterfly_viewer\">2. Open conda and change directory to the root folder of butterfly_viewer</h3>\n\n<pre><code>cd C:\\butterfly_viewer\n</code></pre>\n\n<h3 id=\"3-if-not-yet-done-install-docs-environment\">3. (If not yet done) Install docs environment</h3>\n\n<p>Install the docs environment with conda using environment_docs.yml, which is a modified version of the Butterfly Viewer's base environment with pdoc and Python 3.7 (which is required for pdoc). This .yml is available in the docs branch. :</p>\n\n<pre><code>conda env create -f environment_docs.yml --prefix ./env_docs\n</code></pre>\n\n<h3 id=\"4-add-returns-to-pdoc-google-docstring-sections\">4. Add <code>\"Returns\"</code> to pdoc Google docstring sections</h3>\n\n<p>pdoc does not include <strong>Returns</strong> in its list of section headers for Google's docstring style guide. This means the returns are not styled like those under <strong>Arguments</strong>. </p>\n\n<p>To give that styling to returns, do this:</p>\n\n<ol>\n<li>Locate <code>docstrings.py</code> in the pdoc site package which installed with the docs environment, likely here:</li>\n</ol>\n\n<pre><code>...\\env_docs\\Lib\\site-packages\\pdoc\\docstrings.py\n</code></pre>\n\n<ol start=\"2\">\n<li>Add <code>\"Returns\"</code> to the list variable <code>GOOGLE_LIST_SECTIONS</code>, which is around line 80 or so.</li>\n</ol>\n\n<pre><code>GOOGLE_LIST_SECTIONS = [\"Args\", \"Raises\", \"Attributes\", \"Returns\"]\n</code></pre>\n\n<ol start=\"3\">\n<li>Save <code>docstrings.py</code></li>\n</ol>\n\n<h3 id=\"5-activate-docs-environment\">5. Activate docs environment</h3>\n\n<pre><code>conda activate ./env_docs\n</code></pre>\n\n<h3 id=\"6-add-to-path-the-butterfly_viewer-source-folder\">6. Add to path the butterfly_viewer source folder</h3>\n\n<pre><code>set PYTHONPATH=C:\\butterfly_viewer\\butterfly_viewer\n</code></pre>\n\n<h3 id=\"7-change-directory-to-source-folder\">7. Change directory to source folder</h3>\n\n<pre><code>cd butterfly_viewer\n</code></pre>\n\n<h3 id=\"8-run-pdoc\">8. Run pdoc</h3>\n\n<p>Run pdoc with the following command while in the source code directory <code>\\butterfly_viewer\\butterfly_viewer</code>:</p>\n\n<pre><code>pdoc C:\\butterfly_viewer\\butterfly_viewer -t C:\\butterfly_viewer\\docs\\_templates --docformat google --logo https://olive-groves.github.io/butterfly_viewer/images/viewer_logo.png --logo-link https://olive-groves.github.io/butterfly_viewer/ --favicon https://olive-groves.github.io/butterfly_viewer/images/viewer_logo.png -o C:\\butterfly_viewer\\docs\\\n</code></pre>\n\n<blockquote>\n  <p>You will need to edit the full directory of the repo in the above pdoc command (<code>C:\\butterfly_viewer\\...</code>) to match that on your machine.</p>\n</blockquote>\n\n<p>We call the custom templates folder with <code>-t</code>. We enforce the google docstring format with <code>--docformat</code>. We add the webpage logo and favicon with <code>--logo</code> and <code>--favicon</code>. We export the docs to the docs subfolder with <code>-o</code>.</p>\n\n<h3 id=\"9-commit-and-push\">9. Commit and push</h3>\n\n<p>Commit and push the updated docs to the docs branch.</p>\n\n<h3 id=\"10-un-checkout-docs-branch\">10. Un-checkout docs branch</h3>\n\n<p>Continue development only after having un-checked out of the docs branch.</p>\n\n<h3 id=\"multi-line-commands\">Multi-line commands</h3>\n\n<p>You can re-run pdoc by copying and pasting the following lines together (steps 2 and 5\u20138), making sure to replace the absolute paths with those of the repo on your own machine:</p>\n\n<pre><code>cd C:\\butterfly_viewer\nconda activate ./env_docs\ncd butterfly_viewer\nset PYTHONPATH=.\npdoc C:\\butterfly_viewer\\butterfly_viewer -t ../docs/_templates --docformat google --logo https://olive-groves.github.io/butterfly_viewer/images/viewer_logo.png --logo-link https://olive-groves.github.io/butterfly_viewer/ --favicon https://olive-groves.github.io/butterfly_viewer/images/viewer_logo.png -o ../docs\n</code></pre>\n\n<h2 id=\"updating-packages-in-environmentyml\">Updating packages in <code>environment.yml</code></h2>\n\n<p>If you change the environment in order to an fix issue, add a feature, or simply reduce a dependency, you can update the packages in the <code>environment.yml</code> of the root by exporting the new environment while it is activated and then replacing that existing YML in the root:</p>\n\n<pre><code>conda activate NAME_OF_ENV\n\nconda install/remove PACKAGE_1\nconda install/remove PACKAGE_2\n...\nconda install/remove PACKAGE_N\n\nconda env export &gt; environment.yml\n</code></pre>\n\n<blockquote>\n  <p>Take care to update both <code>environment.yml</code> and <code>environment_docs.yml</code> in the branch <code>docs</code>. If unable to do so, please create a GitHub issue requesting it be updated. </p>\n</blockquote>\n\n<h1 id=\"credits\">Credits</h1>\n\n<p>Butterfly Viewer is by Lars Maxfield.</p>\n\n<p>Butterfly Viewer uses elements of <a href=\"https://github.com/tpgit\">@tpgit<sup>\u2197</sup></a>'s <em>PyQt MDI Image Viewer</em> (with changes made), which is made available under the Creative Commons Attribution 3.0 license.</p>\n\n<h2 id=\"techniques-and-inspiration\">Techniques and inspiration</h2>\n\n<p>Butterfly Viewer uses well-known image comparison techniques found in both commercial and free software, some of which helped inspire the Viewer itself.</p>\n\n<h3 id=\"sliders-and-overlays\">Sliders and overlays</h3>\n\n<p>A sliding overlay is simply a before-and-after image slider in two-dimensions where the top-left image persists while the other three images are layed over it, hence the name \"sliding overlay\". </p>\n\n<p>The underlying slider functionality is a commonly used method for comparing images as well as maps, videos, and other spatial information.</p>\n\n<h4 id=\"adobe-lightroom\">Adobe Lightroom</h4>\n\n<p><a href=\"https://www.youtube.com/watch?v=sBP2Xe21t18&t=101s\">'Before and After' mode (video)</a> (David Mark Erickson, 2016) and described in this <a href=\"https://www.tipsquirrel.com/comparing-before-and-after-views-in-lightroom/\">blog post</a> (Ashu Mittal, 2009) </p>\n\n<h4 id=\"openseadragon\">OpenSeadragon</h4>\n\n<p><a href=\"https://codepen.io/imoskvin/pen/yOXqvO\">Programmable slider (demo)</a> (Illya Moskvin, 2016 &amp; 2021) </p>\n\n<h4 id=\"iipmooviewer-20\">IIPMooViewer 2.0</h4>\n\n<p><a href=\"https://merovingio.c2rmf.cnrs.fr/iipimage/iipmooviewer/vangogh.html\">'Multi-model overlays' (demo)</a> (2011) with <a href=\"https://iipimage.sourceforge.io/demo\">other demos</a> </p>\n\n<h4 id=\"georeferencer\">Georeferencer</h4>\n\n<p><a href=\"https://davidrumsey.oldmapsonline.org/compare#194959910714\">Mouse-follow 'Swipe' mode (demo)</a> and described in this <a href=\"https://www.davidrumsey.com/view/georeferencer\">documentation</a> (2017) </p>\n\n<h4 id=\"leafletsync-plugin-for-leaflet\">Leaflet.Sync plugin for Leaflet</h4>\n\n<p><a href=\"https://jieter.github.io/Leaflet.Sync/examples/multiple_offset.html\">'Offset' mode (demo)</a> with <a href=\"https://raw.githubusercontent.com/jieter/Leaflet.Sync/HEAD/offset_animation.gif\">animation</a> and available in its <a href=\"https://github.com/jieter/Leaflet.Sync\">GitHub repo</a> (2013) </p>\n\n<h4 id=\"the-new-york-times\">The New York Times</h4>\n\n<p><a href=\"https://www.instagram.com/reel/C30XT07O5UK/\">Visual technique (video)</a> (Steven Kurutz et al., 2024) </p>\n\n<h4 id=\"affinity-designer\">Affinity Designer</h4>\n\n<p><a href=\"https://design.tutsplus.com/courses/affinity-designer-quick-start/lessons/split-screen-view-with-slider\">'Split-Screen View' mode (video)</a> (Kezz Bracey, 2017) </p>\n\n<h4 id=\"3dvista\">3DVista</h4>\n\n<p><a href=\"https://youtu.be/udQHKP1Da-I?si=8_Xz2ofyiB-NEHiG&t=9\">'Dual Viewer' tool (video)</a> </p>\n\n<h4 id=\"mapbrowser\">MapBrowser</h4>\n\n<p><a href=\"https://www.youtube.com/watch?v=pcmfn5fjPXw&t=97s\">'Comparison' tool (video)</a> </p>\n\n<h4 id=\"swipe-in-various-arcgis-apps\">'Swipe' in various ArcGIS apps</h4>\n\n<p><a href=\"https://youtu.be/tX826pH_OJY?si=Opbx18PdI9oICpxm&t=27\">Minimal no-border 'Swipe' tool (video)</a> (GIS Coordinated, 2018) with <a href=\"https://www.esri.com/news/arcuser/0705/91faster.html\">documentation</a> (2005) and a <a href=\"https://www.esri.com/arcgis-blog/products/arcgis-online/mapping/swipe-compare-apps/#landsat\">compilation of apps</a> with screenshots and links (Bern Szukalski, 2021\u20132023): </p>\n\n<ul>\n<li>ArcGIS Instant Apps (Media Map, Imagery Viewer, Atlas, Portfolio, Exhibit, Compare)</li>\n<li>App builders (Experience Builder, Web AppBuilder)</li>\n<li>Imagery apps (World Imagery Wayback, Sentinel-2 Land Cover Explorer, Landsat Explorer, Sentinel Explorer)</li>\n<li>ArcGIS StoryMaps</li>\n</ul>\n\n<h3 id=\"synchronized-panning-and-zooming\">Synchronized panning and zooming</h3>\n\n<h4 id=\"adobe-lightroom-2\">Adobe Lightroom</h4>\n\n<p><a href=\"#adobe-lightroom\">'Before and After' mode</a> </p>\n\n<h4 id=\"openseadragon-2\">OpenSeadragon</h4>\n\n<p><a href=\"https://codepen.io/iangilman/pen/BpwBJe\">Programmable syncing (demo)</a> (Ian Gilman, 2017) </p>\n\n<h4 id=\"faststone-image-viewer\">FastStone Image Viewer</h4>\n\n<p><a href=\"https://www.imagingtips.com/faststone/controlbar/compare/0compare.shtml\">'Compare' window (blog)</a> (Joe Holler, 2009) </p>\n\n<h4 id=\"georeferencer-2\">Georeferencer</h4>\n\n<p><a href=\"https://davidrumsey.oldmapsonline.org/compare#686492204670\">'Grid' mode (demo)</a> and <a href=\"https://www.davidrumsey.com/view/georeferencer\">documented here</a> (2017) </p>\n\n<h4 id=\"leafletsync-plugin-for-leaflet-2\">Leaflet.Sync plugin for Leaflet</h4>\n\n<p><a href=\"https://jieter.github.io/Leaflet.Sync/examples/dual.html\">'Dual' mode (demo)</a> (2013) and available in its <a href=\"https://github.com/jieter/Leaflet.Sync\">GitHub repo</a> </p>\n\n<h4 id=\"iipmooviewer-20-2\">IIPMooViewer 2.0</h4>\n\n<p><a href=\"https://merovingio.c2rmf.cnrs.fr/iipimage/iipmooviewer-2.0/synchro.html\">'Dual synchronized streamed viewing' (demo)</a> (2011) with <a href=\"https://iipimage.sourceforge.io/demo\">other demos</a> </p>\n\n<h4 id=\"geteachcom\">GeTeach.com</h4>\n\n<p><a href=\"https://geteach.com/\">Default design (demo)</a> </p>\n\n<h4 id=\"breezebrowser-pro\">BreezeBrowser Pro</h4>\n\n<p><a href=\"https://www.breezesys.com/BreezeBrowser/prohelp/index.html?overview2.htm\">'Compare images' window (documentation)</a> </p>\n\n<h4 id=\"xnviewmp\">XnViewMP</h4>\n\n<p><a href=\"https://forum.xnview.com/viewtopic.php?t=22667\">'Compare' tool (forum)</a> (2011) with <a href=\"https://1.img-dpreview.com/files/p/TS560x560~forums/66402366/b2c30e2518ab482b8ae0e11ea5b36d3d\">screenshot</a> </p>\n\n<h3 id=\"constrain-panning\">Constrain panning</h3>\n\n<h4 id=\"openseadragon-3\">OpenSeadragon</h4>\n\n<p><a href=\"https://openseadragon.github.io/examples/ui-zoom-and-pan/\"><code>visibilityRatio</code> option (demo)</a> </p>\n\n<h3 id=\"general-user-experience\">General user experience</h3>\n\n<h4 id=\"openseadragon-blender-adobe-lightroom-iipmooviewer\">OpenSeadragon, Blender, Adobe Lightroom, IIPMooViewer</h4>\n\n<p>Minimal and unobstructed viewport appearance with dark background and overall theme </p>\n\n<h4 id=\"windows-10\">Windows 10</h4>\n\n<p>Glowing square buttons in the Start menu </p>\n\n<h4 id=\"microsoft-teams\">Microsoft Teams</h4>\n\n<p>Outline around video panel to indicate who is talking during a call </p>\n\n<h1 id=\"license\">License</h1>\n\n<!--- If you're not sure which open license to use see https://choosealicense.com/--->\n\n<p>Butterfly Viewer is made available under the <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\">GNU GPL v3.0<sup>\u2197</sup></a> license or later. For the full-text, see the <code>LICENSE.txt</code> file in the root directory of the Viewer's GitHub <a href=\"https://github.com/olive-groves/butterfly_viewer\">repo<sup>\u2197</sup></a>.</p>\n"}, {"fullname": "butterfly_viewer.aux_buttons", "modulename": "butterfly_viewer.aux_buttons", "kind": "module", "doc": "<p>Button widgets whose icons can be \"truly\" set to SVG image files.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer.</p>\n\n<h6 id=\"credits\">Credits:</h6>\n\n<blockquote>\n  <p>SvgButton, SvgToolButton, SvgAbstractButton: Copyright (c) 2022 Jung Gyu Yoon (<a href=\"https://github.com/yjg30737\">https://github.com/yjg30737</a>)\n      with changes and additions to SvgAbstractButton.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton", "kind": "class", "doc": "<p>QAbstractButton whose icon can be truly set to an SVG image file.</p>\n\n<p>Changes made to original SvgAbstractButton:</p>\n\n<ul>\n<li>Color setters</li>\n<li>Auto colors</li>\n<li>Default colors</li>\n</ul>\n\n<p>Original SvgAbstractButton: Copyright (c) 2022 Jung Gyu Yoon\nFrom <a href=\"https://github.com/yjg30737/pyqt-svg-abstractbutton\">https://github.com/yjg30737/pyqt-svg-abstractbutton</a></p>\n", "bases": "PyQt5.QtWidgets.QAbstractButton"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setIcon", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setIcon", "kind": "function", "doc": "<p>setIcon(self, QIcon)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.eventFilter", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.eventFilter", "kind": "function", "doc": "<p>eventFilter(self, QObject, QEvent) -> bool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setHoverColor", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setHoverColor", "kind": "function", "doc": "<p>Set color when hovered ('#XXXXXX', '#XXX', '<color>', 'transparent', None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auto</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setPressedColor", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setPressedColor", "kind": "function", "doc": "<p>Set color when pressed ('#XXXXXX', '#XXX', '<color>', 'transparent', None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">auto</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setCheckedColor", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setCheckedColor", "kind": "function", "doc": "<p>Set color when checked ('#XXXXXX', '#XXX', '<color>', 'transparent', None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setTextColor", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setTextColor", "kind": "function", "doc": "<p>Set text color ('#XXXXXX', '#XXX', '<color>', 'transparent', None)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgAbstractButton.setCheckedBorderFactor", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgAbstractButton.setCheckedBorderFactor", "kind": "function", "doc": "<p>[int 0-inf] Set lighten factor for checked border color.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">220</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_buttons.SvgButton", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgButton", "kind": "class", "doc": "<p>QPushButton which supports SVG icon.</p>\n\n<p>Copyright (c) 2022 Jung Gyu Yoon</p>\n\n<p>From <a href=\"https://github.com/yjg30737/pyqt-svg-button/\">https://github.com/yjg30737/pyqt-svg-button/</a></p>\n", "bases": "PyQt5.QtWidgets.QPushButton, SvgAbstractButton"}, {"fullname": "butterfly_viewer.aux_buttons.SvgToolButton", "modulename": "butterfly_viewer.aux_buttons", "qualname": "SvgToolButton", "kind": "class", "doc": "<p>QToolButton which supports SVG icon</p>\n\n<p>Copyright (c) 2022 Jung Gyu Yoon</p>\n\n<p>From <a href=\"https://github.com/yjg30737/pyqt-svg-toolbutton/blob/main/pyqt_svg_toolbutton/svgToolButton.py\">https://github.com/yjg30737/pyqt-svg-toolbutton/blob/main/pyqt_svg_toolbutton/svgToolButton.py</a></p>\n", "bases": "PyQt5.QtWidgets.QToolButton, SvgAbstractButton"}, {"fullname": "butterfly_viewer.aux_buttons.ViewerButton", "modulename": "butterfly_viewer.aux_buttons", "qualname": "ViewerButton", "kind": "class", "doc": "<p>SvgButton with styles for Butterfly Viewer main interface.</p>\n", "bases": "SvgButton"}, {"fullname": "butterfly_viewer.aux_buttons.ViewerButton.setStyle", "modulename": "butterfly_viewer.aux_buttons", "qualname": "ViewerButton.setStyle", "kind": "function", "doc": "<p>setStyle(self, QStyle)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments", "modulename": "butterfly_viewer.aux_comments", "kind": "module", "doc": "<p>Comment items for CustomQGraphicsScene.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer.</p>\n\n<p>Creates an editable and movable comment on QGraphicsScene at a given scene position.</p>\n"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem", "kind": "class", "doc": "<p>Create an editable and movable comment for QGraphicsScene.</p>\n\n<h6 id=\"features\">Features:</h6>\n\n<blockquote>\n  <p>Editable field for plain text.\n  Draggable item with visible datum centered at actual location.\n  Multiple color schemes.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>initial_scene_pos (QPointF):</strong>  The starting position of the comment datum on the scene.</li>\n<li><strong>color (str):</strong>  The color scheme based on the presets of text color (white, red, blue, black, yellow, green).</li>\n<li><strong>comment_text (str):</strong>  Text of the comment.</li>\n<li><strong>set_cursor_on_creation (bool):</strong>  True to set cursor on comment text field on instantiation; False to ignore.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QGraphicsRectItem"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.set_cursor", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.set_cursor", "kind": "function", "doc": "<p>Set cursor on the comment text field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.get_scene_pos", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.get_scene_pos", "kind": "function", "doc": "<p>QPointF: Get datum position of the comment.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.get_comment_text_qstring", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.get_comment_text_qstring", "kind": "function", "doc": "<p>QString: Get comment text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.get_comment_text_str", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.get_comment_text_str", "kind": "function", "doc": "<p>str: Get comment text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.get_color", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.get_color", "kind": "function", "doc": "<p>str: Get descriptor of color.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_comments.CommentItem.set_color", "modulename": "butterfly_viewer.aux_comments", "qualname": "CommentItem.set_color", "kind": "function", "doc": "<p>Set color based on the presets of text color (white, red, blue, black, yellow, green).</p>\n\n<p>Applies highlight behind the text to make it more visible over images.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>color (str):</strong>  The color scheme based on the presets of text color (white, red, blue, black, yellow, green).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;white&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dialogs", "modulename": "butterfly_viewer.aux_dialogs", "kind": "module", "doc": "<p>QDialog widgets for SplitView.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer.</p>\n\n<p>Creates a dialog window for users to calculate the pixel-unit conversion for rulers in SplitView.</p>\n"}, {"fullname": "butterfly_viewer.aux_dialogs.PixelUnitConversionInputDialog", "modulename": "butterfly_viewer.aux_dialogs", "qualname": "PixelUnitConversionInputDialog", "kind": "class", "doc": "<p>Create a dialog window to calculate the conversion for pixels to other units of length in SplitView.</p>\n\n<p>Currently only supports millimeters.\nEmits the value of the px-per-mm conversion if user clicks \"Ok\" on dialog.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parent:</strong>  Do not set OR only set to None.</li>\n<li><strong>unit (str):</strong>  Unit of length to which to convert from pixels, abbreviated. \nCurrently only supports \"mm\" (millimeters).</li>\n<li><strong>px_conversion (float):</strong>  Quantity of pixels in a known distance.</li>\n<li><strong>unit_conversion (float):</strong>  Quantity of the specified unit of length in a known distance.</li>\n<li><strong>px_per_unit (float):</strong>  Pixel-per-unit conversion. Set to None if not previously calculated.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QDialog"}, {"fullname": "butterfly_viewer.aux_dialogs.PixelUnitConversionInputDialog.on_px_textedit_edited", "modulename": "butterfly_viewer.aux_dialogs", "qualname": "PixelUnitConversionInputDialog.on_px_textedit_edited", "kind": "function", "doc": "<p>Filter and correct text typed into pixel field.</p>\n\n<h6 id=\"corrects-the-following\">Corrects the following:</h6>\n\n<blockquote>\n  <p>Decimal comma to decimal point (0,2 &gt; 0.2).\n  No leading zero to leading zero (.2 &gt; 0.2).\n  Hanging decimal to zero in tenths place (2. &gt; 2.0).</p>\n</blockquote>\n\n<h6 id=\"filters\">Filters:</h6>\n\n<blockquote>\n  <p>Non-numeric text.\n  Non float-to-text convertible numbers.\n  Zeroes (distances cannot be zero).</p>\n</blockquote>\n\n<p>Triggered by QLineEdit.textEdited.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text (str):</strong>  From QLineEdit.textEdited.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dialogs.PixelUnitConversionInputDialog.on_unit_textedit_edited", "modulename": "butterfly_viewer.aux_dialogs", "qualname": "PixelUnitConversionInputDialog.on_unit_textedit_edited", "kind": "function", "doc": "<p>Filter and correct text typed into unit of length field.</p>\n\n<h6 id=\"corrects-the-following\">Corrects the following:</h6>\n\n<blockquote>\n  <p>Decimal comma to decimal point (0,2 &gt; 0.2).\n  No leading zero to leading zero (.2 &gt; 0.2).\n  Hanging decimal to zero in tenths place (2. &gt; 2.0).</p>\n</blockquote>\n\n<h6 id=\"filters\">Filters:</h6>\n\n<blockquote>\n  <p>Non-numeric text.\n  Non float-to-text convertible numbers.\n  Zeroes.</p>\n</blockquote>\n\n<p>Triggered by QLineEdit.textEdited.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text (str):</strong>  From QLineEdit.textEdited.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop", "modulename": "butterfly_viewer.aux_dragdrop", "kind": "module", "doc": "<p>Drag-and-drop interface widgets and their supporting subwidgets for Butterfly Viewer.</p>\n\n<p>Not intended as a script.</p>\n\n<h6 id=\"interface-widgets-are\">Interface widgets are:</h6>\n\n<blockquote>\n  <p>DragDropImageLabel, for users to drag and drop an image from local storage and show a preview in the drop area.\n  FourDragDropImageLabel, a 2x2 panel of DragDropImageLabel designed for users to arrange images for a SplitView.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel", "kind": "class", "doc": "<p>Custom QLabel as a drag-and-drop zone for images.</p>\n\n<p>Instantiate without input.</p>\n", "bases": "PyQt5.QtWidgets.QLabel"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.setPixmap", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.setPixmap", "kind": "function", "doc": "<p>QPixmap: Extend setPixmap() to also set style and size, and execute supporting functions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.set_pixmap_to_label_size", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.set_pixmap_to_label_size", "kind": "function", "doc": "<p>Resize and set pixmap to the label's size, thus maintaining the label's size and shape.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.clear", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.clear", "kind": "function", "doc": "<p>Extend clear() to also set style and size, reduce memory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.width_contents", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.width_contents", "kind": "function", "doc": "<p>float: Width of the label's contents excluding the frame width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.height_contents", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.height_contents", "kind": "function", "doc": "<p>float: Height of the label's contents excluding the frame width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_unoccupied_notaddable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_unoccupied_notaddable", "kind": "function", "doc": "<p>Set label stylesheet to unoccupied and unaddable state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_unoccupied_addable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_unoccupied_addable", "kind": "function", "doc": "<p>Set label stylesheet to unoccupied and addable state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_occupied_notaddable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_occupied_notaddable", "kind": "function", "doc": "<p>Set label stylesheet to occupied and unaddable state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_occupied_addable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_occupied_addable", "kind": "function", "doc": "<p>Set label stylesheet to occupied and addable state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_hovered_unoccupied", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_hovered_unoccupied", "kind": "function", "doc": "<p>Set label stylesheet to hovered and unoccupied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.stylesheet_hovered_occupied", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.stylesheet_hovered_occupied", "kind": "function", "doc": "<p>Set label stylesheet to hovered and occupied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.set_stylesheet_addable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.set_stylesheet_addable", "kind": "function", "doc": "<p>bool: Set addable state of label stylesheet, considering current occupied state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.set_stylesheet_occupied", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.set_stylesheet_occupied", "kind": "function", "doc": "<p>bool: Set occupied state of label stylesheet, considering current addable state.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabel.set_stylesheet_hovered", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabel.set_stylesheet_hovered", "kind": "function", "doc": "<p>bool: Set hovered state of label stylesheet, considering current occupied and addable states.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.ImageLabelMain", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "ImageLabelMain", "kind": "class", "doc": "<p>Extend ImageLabel as 'main' drag-and-drop zone for SplitViewCreator.</p>\n\n<p>Instantiate without input.</p>\n", "bases": "ImageLabel"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel", "kind": "class", "doc": "<p>Drag-and-drop widget to preview an image from local storage and hold its filepath.</p>\n\n<h6 id=\"includes\">Includes:</h6>\n\n<blockquote>\n  <p>Button to select an image from a dialog window. \n  Button to clear the current image.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>show_filename (bool):</strong>  True to show label with filename over image preview; False to hide.</li>\n<li><strong>show_pushbuttons (bool):</strong>  True to show button for selecting file from dialog and button to clear image; False to hide.</li>\n<li><strong>is_main (bool):</strong>  True if the label is the drag zone for the main image of SplitView; False if not.</li>\n<li><strong>text_default (str):</strong>  Text to show when no image preview is showing.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.set_addable", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.set_addable", "kind": "function", "doc": "<p>bool: Set whether an imaged may be added (dragged and dropped) into the widget.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.dragEnterEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.dragEnterEvent", "kind": "function", "doc": "<p>event: Override dragEnterEvent() to set stylesheet as hovered and read filepath from a dragged image, but reject multiple files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.dragMoveEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.dragMoveEvent", "kind": "function", "doc": "<p>event: Override dragMoveEvent() to reject multiple files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.dragLeaveEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.dragLeaveEvent", "kind": "function", "doc": "<p>event: Override dragLeaveEvent() to set stylesheet as not hovered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.dropEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.dropEvent", "kind": "function", "doc": "<p>event: Override dropEvent() to read filepath from a dragged image and load image preview.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.grab_image_urls_from_mimedata", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.grab_image_urls_from_mimedata", "kind": "function", "doc": "<p>mimeData: Get urls (filepaths) from drag event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mimedata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.mouseDoubleClickEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.mouseDoubleClickEvent", "kind": "function", "doc": "<p>event: Override mouseDoubleClickEvent() to trigger dialog window to open image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.was_clicked_open_pushbutton", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.was_clicked_open_pushbutton", "kind": "function", "doc": "<p>Trigger dialog window to open image when button to select image is clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.was_clicked_clear_pushbutton", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.was_clicked_clear_pushbutton", "kind": "function", "doc": "<p>Clear image preview when clear button is clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.set_image", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.set_image", "kind": "function", "doc": "<p>QPixmap: Scale and set preview of image; set status of clear button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixmap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.load_image", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.load_image", "kind": "function", "doc": "<p>str: Load image from filepath with loading grayout; set filename text.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>loaded (bool):</strong>  True if image successfully loaded; False if not.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.open_image_via_dialog", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.open_image_via_dialog", "kind": "function", "doc": "<p>Open dialog window to select and load image from file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.clear_image", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.clear_image", "kind": "function", "doc": "<p>Clear image preview and filepath; set status of clear button; set text of drag zone.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.set_text", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.set_text", "kind": "function", "doc": "<p>str: Set text of drag zone when there is no image preview.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.set_filename_label", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.set_filename_label", "kind": "function", "doc": "<p>str: Set text of filename label on image preview.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.DragDropImageLabel.display_loading_grayout", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "DragDropImageLabel.display_loading_grayout", "kind": "function", "doc": "<p>Show/hide grayout overlay on label for loading sequences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show grayout; False to hide.</li>\n<li><strong>text (str):</strong>  The text to show on the grayout.</li>\n<li><strong>pseudo_load_time (float):</strong>  The delay (in seconds) to hide the grayout to give users a feeling of action.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Loading...&#39;</span>, </span><span class=\"param\"><span class=\"n\">pseudo_load_time</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel", "kind": "class", "doc": "<p>2x2 panel of drag-and-drop zones for users to arrange images for a SplitView.</p>\n\n<p>Instantiate without input.</p>\n\n<p>Allows dragging multiple files (1\u20134) at once.</p>\n", "bases": "PyQt5.QtWidgets.QFrame"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel.dragEnterEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel.dragEnterEvent", "kind": "function", "doc": "<p>Override dragEnterEvent() to accept multiple (1-4) image files and set stylesheet(s) as hovered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel.dragMoveEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel.dragMoveEvent", "kind": "function", "doc": "<p>Override dragMoveEvent() to accept multiple (1-4) image files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel.dragLeaveEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel.dragLeaveEvent", "kind": "function", "doc": "<p>Override dragLeaveEvent() to set stylesheet(s) as no longer hovered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel.dropEvent", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel.dropEvent", "kind": "function", "doc": "<p>event: Override dropEvent() to read filepath(s) from 1-4 dragged images and load the preview(s).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.FourDragDropImageLabel.grab_image_urls_from_mimedata", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "FourDragDropImageLabel.grab_image_urls_from_mimedata", "kind": "function", "doc": "<p>mimeData: Get urls (filepaths) from drag event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mimedata</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_dragdrop.main", "modulename": "butterfly_viewer.aux_dragdrop", "qualname": "main", "kind": "function", "doc": "<p>Demo the drag-and-drop function in the 2x2 panel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_exif", "modulename": "butterfly_viewer.aux_exif", "kind": "module", "doc": "<p>Functions which use image EXIF for Butterfly Viewer and Registrator.</p>\n\n<p>Not intended as a script.</p>\n"}, {"fullname": "butterfly_viewer.aux_exif.get_exif_rotation_angle", "modulename": "butterfly_viewer.aux_exif", "qualname": "get_exif_rotation_angle", "kind": "function", "doc": "<p>Get rotation angle from EXIF of image file.</p>\n\n<p>Credit: tutuDajuju</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filepath (str):</strong>  Absolute path of image file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>orientation (int or None):</strong>  Image orientation as integer angle if exists; None if does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_functions", "modulename": "butterfly_viewer.aux_functions", "kind": "module", "doc": "<p>Functions without a specific category for Butterfly Viewer and Registrator.</p>\n\n<p>Not intended as a script.</p>\n\n<h6 id=\"credits\">Credits:</h6>\n\n<blockquote>\n  <p>PyQt MDI Image Viewer by tpgit (<a href=\"http://tpgit.github.io/MDIImageViewer/\">http://tpgit.github.io/MDIImageViewer/</a>) for sync pan and zoom.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_functions.determineSyncSenderDimension", "modulename": "butterfly_viewer.aux_functions", "qualname": "determineSyncSenderDimension", "kind": "function", "doc": "<p>Get the dimension of the sender image with which to synchronize zoom.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>width (int):</strong>  Width of sender in pixels.</li>\n<li><strong>height (int):</strong>  Height of sender in pixels.</li>\n<li><strong>sync_by (str):</strong>  Method by which to sync zoom (\"box\", \"width\", \"height\", \"pixel\").</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>dimension (int, None):</strong>  Dimension with which to synchronize zoom (None if sync by pixel).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">sync_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;box&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_functions.determineSyncAdjustmentFactor", "modulename": "butterfly_viewer.aux_functions", "qualname": "determineSyncAdjustmentFactor", "kind": "function", "doc": "<p>Get the factor with which to multiply the zoom of the sender before giving it to the receiver to synchronize them.</p>\n\n<p>Returns 1 if receiver width or height are zero.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sync_by (str):</strong>  Method by which to sync zoom (\"box\", \"width\", \"height\", \"pixel\").</li>\n<li><strong>sender_dimension (int):</strong>  Dimension of sender in pixels, as determined by determineSyncSenderDimension().</li>\n<li><strong>receiver_width (int):</strong>  Width of receiver in pixels.</li>\n<li><strong>receiver_height (int):</strong>  Height of sender in pixels.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>adjustment_factor (float):</strong>  Factor with which to multiply the sender zoom to sync the receiver.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sender_dimension</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">receiver_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">receiver_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_functions.strippedName", "modulename": "butterfly_viewer.aux_functions", "qualname": "strippedName", "kind": "function", "doc": "<p>Get filename from a filepath.</p>\n\n<p>Legacy function from PyQt MDI Image Viewer by tpgit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fullFilename (str):</strong>  The filepath (the \"full\" filename).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>value (str):</strong>  The filename as stripped from the filepath.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fullFilename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_functions.toBool", "modulename": "butterfly_viewer.aux_functions", "qualname": "toBool", "kind": "function", "doc": "<p>Convert string value to bool.</p>\n\n<p>Legacy function from PyQt MDI Image Viewer by tpgit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>value (any)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li>value (bool)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces", "modulename": "butterfly_viewer.aux_interfaces", "kind": "module", "doc": "<p>User interface widgets and their supporting subwidgets for Butterfly Viewer.</p>\n\n<p>Not intended as a script.</p>\n\n<h6 id=\"interface-widgets-are\">Interface widgets are:</h6>\n\n<blockquote>\n  <p>SplitViewCreator, for users to add images in a 2x2 drag-and-drop zone from which to create a sliding overlay.\n  SplitViewManager, for shortcut buttons to position and lock the position of the split in a sliding overlay.\n  SlidersOpacitySplitViews, for sliders to the transparencies of a SplitView's overlayed images.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_interfaces.FourDragDropImageLabelForSplitView", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "FourDragDropImageLabelForSplitView", "kind": "class", "doc": "<p>Extends a 2x2 drag-and-drop zone for SplitViewCreator.</p>\n\n<p>Requires a base image (main; top-left) to be given before other images of SplitView may be added.</p>\n\n<h6 id=\"instantiate-without-input\">Instantiate without input:</h6>\n\n<blockquote>\n  <p>self.drag_drop_area = FourDragDropImageLabelForSplitView()</p>\n</blockquote>\n", "bases": "aux_dragdrop.FourDragDropImageLabel"}, {"fullname": "butterfly_viewer.aux_interfaces.FourDragDropImageLabelForSplitView.set_addable_all_except_main", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "FourDragDropImageLabelForSplitView.set_addable_all_except_main", "kind": "function", "doc": "<p>Set all overlay images to be (or not to be) addable via drag-and-drop.</p>\n\n<p>Convenience for the SplitViewCreator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to make the overlay images addable; False to make un-addable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.FourDragDropImageLabelForSplitView.on_main_topleft_occupied", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "FourDragDropImageLabelForSplitView.on_main_topleft_occupied", "kind": "function", "doc": "<p>Set when base image becomes occupied or unoccupied to set whether overlay images can be added.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to indicate base image is occupied (and thus overlay images may be added); \nFalse to indicate main image is unoccupied (and thus overlay images may not be added).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewCreator", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewCreator", "kind": "class", "doc": "<p>Interface for users to add images from which to create a SplitView.</p>\n\n<p>Users can add local image files via drag-and-drop and \"Select image...\" dialogs.</p>\n\n<p>Instantiate without input. See Butterfly Viewer for implementation.</p>\n", "bases": "PyQt5.QtWidgets.QFrame"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewCreator.setMouseTracking", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewCreator.setMouseTracking", "kind": "function", "doc": "<p>PyQt flag: Override mouse tracking to set mouse tracking for all children widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewCreator.display_loading_grayout", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewCreator.display_loading_grayout", "kind": "function", "doc": "<p>Show/hide grayout screen for loading sequences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show grayout; False to hide.</li>\n<li><strong>text (str):</strong>  The text to show on the grayout.</li>\n<li><strong>pseudo_load_time (float):</strong>  The delay (in seconds) to hide the grayout to give users a feeling of action.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Loading...&#39;</span>, </span><span class=\"param\"><span class=\"n\">pseudo_load_time</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SliderDeluxe", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SliderDeluxe", "kind": "class", "doc": "<p>Custom slider for setting and indicating the transparencies of overlay images in SplitView.</p>\n\n<p>Used in SlidersOpacitySplitViews.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Text for slider label.</li>\n<li><strong>pixmap_preview_position (str):</strong>  The position of the preview icon for indicating opacity (\"Full\", \"Top right\", \"Bottom right\", \"Bottom left\").</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "butterfly_viewer.aux_interfaces.SliderDeluxe.on_slider_changed", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SliderDeluxe.on_slider_changed", "kind": "function", "doc": "<p>Set opacity of preview icon when slider is changed.</p>\n\n<p>Triggered when the slider value changes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  Opacity, where 100 is opaque (not transparent) and 0 is transparent.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SliderDeluxe.on_slider_trigger", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SliderDeluxe.on_slider_trigger", "kind": "function", "doc": "<p>QAction: Signal the slider position when slider is triggered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SliderDeluxe.on_spinbox_change", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SliderDeluxe.on_spinbox_change", "kind": "function", "doc": "<p>int: Signal the slider position when spinbox is changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SliderDeluxe.set_value", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SliderDeluxe.set_value", "kind": "function", "doc": "<p>int (0-100): Set value of slider.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews", "kind": "class", "doc": "<p>Interface for changing the transparency (opposite of opacity) of the overlay images of a SplitView.</p>\n\n<p>Instantiate without input. See Butterfly Viewer for implementation.</p>\n", "bases": "PyQt5.QtWidgets.QFrame"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.update_sliders", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.update_sliders", "kind": "function", "doc": "<p>Update the values of the opacity sliders.</p>\n\n<p>Arg: \n    opacity_topright (int): Set the value of the slider for top-right of SplitView (0-100).\n    opacity_bottomright (int): Set the value of the slider for bottom-right slider of SplitView (0-100).\n    opacity_bottomleft (int): Set the value of the slider for bottom-left slider of SplitView (0-100).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">opacity_base</span>,</span><span class=\"param\">\t<span class=\"n\">opacity_topright</span>,</span><span class=\"param\">\t<span class=\"n\">opacity_bottomright</span>,</span><span class=\"param\">\t<span class=\"n\">opacity_bottomleft</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.reset_sliders", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.reset_sliders", "kind": "function", "doc": "<p>Reset all sliders to 100 and disable them (convenience).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.set_enabled", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.set_enabled", "kind": "function", "doc": "<p>Enable/disable opacity sliders (convenience).</p>\n\n<p>Arg: \n    boolean_base (bool): True is enabled; False is disabled.\n    boolean_topright (bool): True is enabled; False is disabled.\n    boolean_bottomright (bool): True is enabled; False is disabled.\n    boolean_bottomleft (bool): True is enabled; False is disabled.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">boolean_base</span>,</span><span class=\"param\">\t<span class=\"n\">boolean_topright</span>,</span><span class=\"param\">\t<span class=\"n\">boolean_bottomright</span>,</span><span class=\"param\">\t<span class=\"n\">boolean_bottomleft</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.set_enabled_base", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.set_enabled_base", "kind": "function", "doc": "<p>bool: Enable/disable opacity slider and label for base of SplitView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.set_enabled_topright", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.set_enabled_topright", "kind": "function", "doc": "<p>bool: Enable/disable opacity slider and label for top-right of SplitView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.set_enabled_bottomright", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.set_enabled_bottomright", "kind": "function", "doc": "<p>bool: Enable/disable opacity slider and label for bottom-right of SplitView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.set_enabled_bottomleft", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.set_enabled_bottomleft", "kind": "function", "doc": "<p>bool: Enable/disable opacity slider and label for bottom-left of SplitView.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SlidersOpacitySplitViews.setMouseTracking", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SlidersOpacitySplitViews.setMouseTracking", "kind": "function", "doc": "<p>PyQt flag: Override mouse tracking to set mouse tracking for all children widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flag</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.PushbuttonSplitViewSet", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "PushbuttonSplitViewSet", "kind": "class", "doc": "<p>Custom ViewerButton for buttons in SplitViewManager to set the position of the split in a SplitView.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>url (str):</strong>  The SVG icon of the split shortcut.</li>\n<li><strong>x (float):</strong>  The position of the split (0-1) of which is to be \"shortcutted\" as a proportion of the base image's horizontal resolution.</li>\n<li><strong>y (float):</strong>  The position of the split (0-1) of which is to be \"shortcutted\" as a proportion of the base image's vertical resolution.</li>\n</ul>\n", "bases": "aux_buttons.ViewerButton"}, {"fullname": "butterfly_viewer.aux_interfaces.PushbuttonSplitViewSet.enterEvent", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "PushbuttonSplitViewSet.enterEvent", "kind": "function", "doc": "<p>Override enterEvent to signal the shortcutted position of the button when hovered by the mouse.</p>\n\n<p>Allows the user to preview the split shortcut without needing to click and lock.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>event (PyQt event)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.PushbuttonSplitViewSet.leaveEvent", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "PushbuttonSplitViewSet.leaveEvent", "kind": "function", "doc": "<p>event: Override leaveEvent to pass when mouse leaves area of the button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.PushbuttonSplitViewSet.on_clicked", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "PushbuttonSplitViewSet.on_clicked", "kind": "function", "doc": "<p>Signal the shortcutted position of the button when clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewManager", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewManager", "kind": "class", "doc": "<p>Interface for shortcut buttons to position and lock the split in a sliding overlay.</p>\n\n<p>Instantiate without input. See Butterfly Viewer for implementation.</p>\n\n<h6 id=\"features\">Features:</h6>\n\n<blockquote>\n  <p>Button to lock and unlock the split of a sliding overlay. \n  Arrow buttons position the split to shortcut parts of the image (center, top-right, bottom-left, etc.).</p>\n</blockquote>\n", "bases": "PyQt5.QtWidgets.QWidget"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewManager.on_toggle_lock_split_pushbutton", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewManager.on_toggle_lock_split_pushbutton", "kind": "function", "doc": "<p>Signal the locking and unlocking of the split and set the text elements of the lock button.</p>\n\n<p>Triggered when the lock button is toggled on and off (locked and unlocked).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True for locking split; False for unlocking split.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewManager.on_hovered_set_pushbutton", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewManager.on_hovered_set_pushbutton", "kind": "function", "doc": "<p>Signal the position of the split to temporarily move the split.</p>\n\n<p>Triggered when the shortcut arrow buttons are hovered.\nNeeded to temporarily signal the moving of the split when the user hovers over a split shortcut button. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's horizontal resolution.</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's vertical resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_percent</span>, </span><span class=\"param\"><span class=\"n\">y_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_interfaces.SplitViewManager.on_clicked_set_pushbutton", "modulename": "butterfly_viewer.aux_interfaces", "qualname": "SplitViewManager.on_clicked_set_pushbutton", "kind": "function", "doc": "<p>Signal the clicking of the lock button with a given split position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's horizontal resolution.</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's vertical resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_percent</span>, </span><span class=\"param\"><span class=\"n\">y_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_labels", "modulename": "butterfly_viewer.aux_labels", "kind": "module", "doc": "<p>QLabel widgets for Butterfly Viewer and Registrator.</p>\n\n<p>Not intended as a script.</p>\n"}, {"fullname": "butterfly_viewer.aux_labels.FilenameLabel", "modulename": "butterfly_viewer.aux_labels", "qualname": "FilenameLabel", "kind": "class", "doc": "<p>Styled label for overlaying filenames on viewers and image previews.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>text (str):</strong>  The text to show (the filename).</li>\n<li><strong>remove_path (bool):</strong>  True to remove path from the filename (filepath).</li>\n<li><strong>visibilty_based_on_text (bool):</strong>  True to hide label when text is None; False to always show.</li>\n<li><strong>belongs_to_split (bool):</strong>  True for improved style for sliding overlays in SplitView; False as default.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QLabel"}, {"fullname": "butterfly_viewer.aux_labels.FilenameLabel.setText", "modulename": "butterfly_viewer.aux_labels", "qualname": "FilenameLabel.setText", "kind": "function", "doc": "<p>str: Override setText to remove path in filename and set visibilty as specified.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_labels.FilenameLabel.make_visible_based_on_text", "modulename": "butterfly_viewer.aux_labels", "qualname": "FilenameLabel.make_visible_based_on_text", "kind": "function", "doc": "<p>Make label visible if label has text; hide label if no text (only if set to do so).</p>\n\n<p>Only call with no arguments (for example, make_visible_based_on_text()).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_labels.FilenameLabel.set_visible_based_on_text", "modulename": "butterfly_viewer.aux_labels", "qualname": "FilenameLabel.set_visible_based_on_text", "kind": "function", "doc": "<p>bool: Set visibilty of label but take into account the setting for visibilty based on text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_layouts", "modulename": "butterfly_viewer.aux_layouts", "kind": "module", "doc": "<p>Widget layouts for Butterfly Viewer.</p>\n\n<p>Not intended as a script.</p>\n\n<p>GridLayoutFloatingShadow extends QGridLayout by adding a dropshadow effect for added widgets.</p>\n"}, {"fullname": "butterfly_viewer.aux_layouts.GridLayoutFloatingShadow", "modulename": "butterfly_viewer.aux_layouts", "qualname": "GridLayoutFloatingShadow", "kind": "class", "doc": "<p>Custom QGridLayout which adds a dropshadow effect to each added widget.</p>\n\n<p>Instantiate without input. Add widgets only with addWidget(). Does not support addLayout().</p>\n\n<p>Dropshadow makes interface widgets more distinguishable as overlayed elements.</p>\n", "bases": "PyQt5.QtWidgets.QGridLayout"}, {"fullname": "butterfly_viewer.aux_layouts.GridLayoutFloatingShadow.addWidget", "modulename": "butterfly_viewer.aux_layouts", "qualname": "GridLayoutFloatingShadow.addWidget", "kind": "function", "doc": "<p>Override addWidget() to add widget to layout with dropshadow graphics effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>widget (QWidget or child class thereof):</strong>  The widget to add to the layout.</li>\n<li><strong>row_i (int):</strong>  The row location of the widget.</li>\n<li><strong>col_i (int):</strong>  The column location of the widget.</li>\n<li><strong>row_span (int):</strong>  The number of rows the widget spans.</li>\n<li><strong>col_span (int):</strong>  The number of columns the widget spans.</li>\n<li><strong>alignment (AlignmentFlag):</strong>  The alignment of the widget in the designated layout location.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">row_i</span>, </span><span class=\"param\"><span class=\"n\">col_i</span>, </span><span class=\"param\"><span class=\"n\">row_span</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">col_span</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">alignment</span><span class=\"o\">=</span><span class=\"mi\">132</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi", "modulename": "butterfly_viewer.aux_mdi", "kind": "module", "doc": "<p>QMdiArea with drag-and-drop functions, vertical/horizontal window tiling, and keyboard shortcuts.</p>\n\n<p>Not intended as a script.</p>\n\n<p>Creates the multi document interface (MDI) widget for the Butterfly Viewer.</p>\n"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals", "kind": "class", "doc": "<p>Extend QMdiArea with drag-and-drop functions, vertical/horizontal window tiling, and keyboard shortcuts.</p>\n\n<p>Instantiate without input.</p>\n\n<h6 id=\"features\">Features:</h6>\n\n<blockquote>\n  <p>Signals for drag-and-drop, subwindow events, shortcut keys.\n  Methods for arranging the subwindows vertically and horizontally, and to track the history of the arrangement.</p>\n</blockquote>\n", "bases": "PyQt5.QtWidgets.QMdiArea"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.tile_subwindows_vertically", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.tile_subwindows_vertically", "kind": "function", "doc": "<p>Arrange subwindows vertically as a single column.</p>\n\n<p>Arranges subwindows top to bottom in order of when they were added (oldest to newest).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>button_input:</strong>  Always set as None (kept for legacy purposes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">button_input</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.tile_subwindows_horizontally", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.tile_subwindows_horizontally", "kind": "function", "doc": "<p>Arrange subwindows horizontally as a single row.</p>\n\n<p>Arranges subwindows left to right in order of when they were added (oldest to newest).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>button_input:</strong>  Always set as None (kept for legacy purposes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">button_input</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.tileSubWindows", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.tileSubWindows", "kind": "function", "doc": "<p>Arrange subwindows as tiles (override).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>button_input:</strong>  Always set as None (kept for legacy purposes).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">button_input</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.tile_what_was_done_last_time", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.tile_what_was_done_last_time", "kind": "function", "doc": "<p>Arrange subwindows based on previous arrangement.</p>\n\n<p>Needed to arrange windows in the last arranged method during events like resizing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.dragEnterEvent", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.dragEnterEvent", "kind": "function", "doc": "<p>event: Signal that one or more files have been dragged into the area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.dragMoveEvent", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.dragMoveEvent", "kind": "function", "doc": "<p>event: Signal that one or more files are being dragged in the area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.dragLeaveEvent", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.dragLeaveEvent", "kind": "function", "doc": "<p>event: Signal that one or more files have been dragged out of the area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.dropEvent", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.dropEvent", "kind": "function", "doc": "<p>event: Signal that one or more files have been dropped into the area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.subwindow_was_activated", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.subwindow_was_activated", "kind": "function", "doc": "<p>Signal if first subwindow has been activated or if last remaining subwindow has been closed.</p>\n\n<p>Triggered when subwindow activated signal of area is emitted.\nFixes issues with improper subwindow activation behavior.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>window (QMdiSubWindow)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_mdi.QMdiAreaWithCustomSignals.resizeEvent", "modulename": "butterfly_viewer.aux_mdi", "qualname": "QMdiAreaWithCustomSignals.resizeEvent", "kind": "function", "doc": "<p>Override resizeEvent() to maintain horizontal and vertical arrangement of subwindows during resizing.</p>\n\n<p>Fixes shuffling of subwindows when area is resized in vertical and horizontal arrangements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers", "modulename": "butterfly_viewer.aux_rulers", "kind": "module", "doc": "<p>Ruler items for CustomQGraphicsScene.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer.</p>\n\n<p>RulerItem creates a movable ruler on QGraphicsScene with specified units of length.</p>\n"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem", "kind": "class", "doc": "<p>Create an endpoint for RulerItem and handle change in ruler position.</p>\n\n<p>Instantiated with a QRectF as input argument. For example:\n    rect     = QtCore.QRectF(point_topleft, point_bottomright)\n    endpoint = CustomItem(rect)</p>\n\n<p>As implemented in RulerItem, the two endpoints reference each other when an endpoint is dragged.\nThis allows the other graphics items of the RulerItem to follow the endpoint movement.</p>\n", "bases": "PyQt5.QtWidgets.QGraphicsEllipseItem"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.add_line", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.add_line", "kind": "function", "doc": "<p>Add QGraphicsLineItem as reference.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>line (QGraphicsLineItem)</li>\n<li><strong>is_point (bool):</strong>  True if endpoint is moving; False if static.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span>, </span><span class=\"param\"><span class=\"n\">is_point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.add_text", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.add_text", "kind": "function", "doc": "<p>QGraphicsTextItem: Add text item to center of ruler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.add_text1", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.add_text1", "kind": "function", "doc": "<p>QGraphicsTextItem: Add text item to first endpoint of ruler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.add_text2", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.add_text2", "kind": "function", "doc": "<p>QGraphicsTextItem: Add text item to second endpoint of ruler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.set_px_per_unit", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.set_px_per_unit", "kind": "function", "doc": "<p>float: Set conversion for pixels to specified unit of length.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">px_per_unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.set_unit", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.set_unit", "kind": "function", "doc": "<p>str: Set abbreviation for unit of length (for example, \"mm\" or \"px\").</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.set_relative_origin_position", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.set_relative_origin_position", "kind": "function", "doc": "<p>Set position of origin for coordinates, distances, and angles.</p>\n\n<h6 id=\"two-options-for-relative-origin\">Two options for relative origin:</h6>\n\n<blockquote>\n  <p>\"topleft\" has (0,0) at the top-left pixel of the image, which is typical for graphics\n   systems. One can think of this as a standard XY coordinate system mirrored about the \n   X-axis, where Y increases downwards. This means clockwise rotation is a positive angle.</p>\n  \n  <p>\"bottomright\" has (0,0) at the bottom-left pixel of the image, just like a standard XY \n   coordinate system. This means counter-clockwise rotation is a positive angle.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>relative_origin_position (str):</strong>  \"topleft\" or \"bottomleft\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relative_origin_position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.itemChange", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.itemChange", "kind": "function", "doc": "<p>Extend itemChange to update the positions and texts of the ruler line and labels.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">change</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.move_line_to_center", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.move_line_to_center", "kind": "function", "doc": "<p>QPointF: Set the center of the ruler line to a position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.update_text", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.update_text", "kind": "function", "doc": "<p>Refresh the text of the ruler's center label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.update_text1", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.update_text1", "kind": "function", "doc": "<p>Refresh the text of the ruler's endpoint 1 label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.update_text2", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.update_text2", "kind": "function", "doc": "<p>Refresh the text of the ruler's endpoint 2 label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.move_text", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.move_text", "kind": "function", "doc": "<p>QPointF: Set the position of the ruler's center label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.move_text1", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.move_text1", "kind": "function", "doc": "<p>QPointF: Set the position of the ruler's endpoint 1 label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.move_text2", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.move_text2", "kind": "function", "doc": "<p>QPointF: Set the position of the ruler's endpoint 2 label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.refresh_positions", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.refresh_positions", "kind": "function", "doc": "<p>Convenience function to refresh (update) positions of the ruler's line and endpoints.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.CustomItem.get_line_length", "modulename": "butterfly_viewer.aux_rulers", "qualname": "CustomItem.get_line_length", "kind": "function", "doc": "<p>Calculate the length of a QLineF.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>line (QLineF)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li>length (float)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.RulerItem", "modulename": "butterfly_viewer.aux_rulers", "qualname": "RulerItem", "kind": "class", "doc": "<p>Create a movable ruler on QGraphicsScene with a specified unit of length.</p>\n\n<h6 id=\"features\">Features:</h6>\n\n<blockquote>\n  <p>Draggable endpoints.\n  Center label showing absolute length.\n  Endpoint labels showing difference in absolute length, horizontal and vertical delta, and angle.</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  The text for labeling units of ruler values.</li>\n<li><strong>px_per_mm (float):</strong>  The conversion for pixels to millimeters. For example, 10 means 10 \npixels-per-mm, meaning the ruler value will show 1 mm when measuring 10 pixels. Set to \n1.0 if the ruler has units of pixels.</li>\n<li><strong>initial_pos_p1 (QPointF):</strong>  The position of endpoint 1 on the scene.</li>\n<li><strong>initial_pos_p2 (QPointF):</strong>  The position of endpoint 2 on the scene.</li>\n<li><strong>relative_origin_position (str):</strong>  The orientation of the origin for coordinate system \n(\"topleft\" or \"bottomleft\").</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QGraphicsRectItem"}, {"fullname": "butterfly_viewer.aux_rulers.RulerItem.set_and_refresh_px_per_unit", "modulename": "butterfly_viewer.aux_rulers", "qualname": "RulerItem.set_and_refresh_px_per_unit", "kind": "function", "doc": "<p>float: Set and refresh units conversion factor (for example, if the conversion is recalculated).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">px_per_unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_rulers.RulerItem.set_and_refresh_relative_origin_position", "modulename": "butterfly_viewer.aux_rulers", "qualname": "RulerItem.set_and_refresh_relative_origin_position", "kind": "function", "doc": "<p>str: Set and refresh orientation of coordinate system (for example, if the orientation setting is changed).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relative_origin_position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes", "modulename": "butterfly_viewer.aux_scenes", "kind": "module", "doc": "<p>QGraphicsScene with signals and right-click functionality for SplitView.</p>\n\n<p>Not intended as a script.</p>\n\n<p>Creates the base (main) scene of the SplitView for the Butterfly Viewer and Registrator.</p>\n"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene", "kind": "class", "doc": "<p>QGraphicsScene with signals and right-click functionality for SplitView.</p>\n\n<p>Recommended to be instantiated without input (for example, my_scene = CustomQGraphicsScene())</p>\n\n<p>Signals for right click menu for comments (create comment, save comments, load comments).\nSignals for right click menu for rulers (create ruler, set origin relative position, set px-per-unit conversion) \nSignals for right click menu for transform mode (interpolate, non-interpolate)\nMethods for right click menu.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>Identical to base class QGraphicsScene.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QGraphicsScene"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.contextMenuEvent", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.contextMenuEvent", "kind": "function", "doc": "<p>Override the event of the context menu (right-click menu)  to display options.</p>\n\n<p>Triggered when mouse is right-clicked on scene.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>event (PyQt event for contextMenuEvent)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.set_relative_origin_position", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.set_relative_origin_position", "kind": "function", "doc": "<p>Set the descriptor of the position of the relative origin for rulers.</p>\n\n<h6 id=\"describes-the-coordinate-orientation\">Describes the coordinate orientation:</h6>\n\n<blockquote>\n  <p>\"bottomleft\" for Cartesian-style (positive X right, positive Y up)\n  \"topleft\" for image-style (positive X right, positive Y down)</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>string (str):</strong>  \"topleft\" or \"bottomleft\" for position of the origin for coordinate system of rulers.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.set_single_transform_mode_smooth", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.set_single_transform_mode_smooth", "kind": "function", "doc": "<p>Set the descriptor of the status of smooth transform mode.</p>\n\n<h6 id=\"describes-the-transform-mode-of-pixels-on-zoom\">Describes the transform mode of pixels on zoom:</h6>\n\n<blockquote>\n  <p>True for smooth (interpolated)\n  False for non-smooth (non-interpolated)</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True for smooth; False for non-smooth.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.dialog_to_set_px_per_mm", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.dialog_to_set_px_per_mm", "kind": "function", "doc": "<p>Open the dialog for users to set the conversion for pixels to millimeters.</p>\n\n<p>Emits the value of the px-per-mm conversion if user clicks \"Ok\" on dialog.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.background_color", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.background_color", "kind": "variable", "doc": "<p>Current background color.</p>\n"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.background_color_lambda", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.background_color_lambda", "kind": "function", "doc": "<p>Within lambda, set color as list with descriptor and RGB values [str, r, g, b].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.background_rgb", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.background_rgb", "kind": "variable", "doc": "<p>Current background color RGB [int, int, int].</p>\n"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.sync_zoom_by", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.sync_zoom_by", "kind": "variable", "doc": "<p>Current sync zoom by.</p>\n"}, {"fullname": "butterfly_viewer.aux_scenes.CustomQGraphicsScene.sync_zoom_by_lambda", "modulename": "butterfly_viewer.aux_scenes", "qualname": "CustomQGraphicsScene.sync_zoom_by_lambda", "kind": "function", "doc": "<p>Within lambda, set sync zoom by str.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview", "modulename": "butterfly_viewer.aux_splitview", "kind": "module", "doc": "<p>Image viewing widget for individual images and sliding overlays with sync zoom and pan.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer and Registrator.</p>\n\n<h6 id=\"credits\">Credits:</h6>\n\n<blockquote>\n  <p>PyQt MDI Image Viewer by tpgit (<a href=\"http://tpgit.github.io/MDIImageViewer/\">http://tpgit.github.io/MDIImageViewer/</a>) for sync pan and zoom.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView", "kind": "class", "doc": "<p>Image viewing widget for individual images and sliding overlays.</p>\n\n<p>Creates an interface with a base image as a main image located at the top left <br />\nand optionally 3 other images (top-left, bottom-left, bottom-right) as a sliding overlay.\nSupports zoom and pan.\nEnables synchronized zoom and pan via signals.\nInput images for a given sliding overlay must have identical resolutions to \nfunction properly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pixmap (QPixmap):</strong>  The main image to be viewed; the basis of the sliding overlay (main; topleft)</li>\n<li><strong>filename_main_topleft (str):</strong>  The image filepath of the main image.</li>\n<li><strong>name (str):</strong>  The name of the viewing widget.</li>\n<li><strong>pixmap_topright (QPixmap):</strong>  The top-right image of the sliding overlay (set None to exclude).</li>\n<li><strong>pixmap_bottomleft (QPixmap):</strong>  The bottom-left image of the sliding overlay (set None to exclude).</li>\n<li><strong>pixmap_bottomright (QPixmap):</strong>  The bottom-right image of the sliding overlay (set None to exclude).</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QFrame"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.currentFile", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.currentFile", "kind": "variable", "doc": "<p>str: Filepath of base image (filename_main_topleft).</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.viewName", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.viewName", "kind": "variable", "doc": "<p>str: The name of the SplitView.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.pixmap_topright", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.pixmap_topright", "kind": "variable", "doc": "<p>The currently viewed QPixmap of the top-right of the split.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.pixmap_bottomleft", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.pixmap_bottomleft", "kind": "variable", "doc": "<p>The currently viewed QPixmap of the bottom-left of the split.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.pixmap_bottomright", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.pixmap_bottomright", "kind": "variable", "doc": "<p>The currently viewed QPixmap of the bottom-right of the split.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.userFriendlyCurrentFile", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.userFriendlyCurrentFile", "kind": "variable", "doc": "<p>str: Filename of base image.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_close_pushbutton_always_visible", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_close_pushbutton_always_visible", "kind": "function", "doc": "<p>Enable/disable the always-on visiblilty of the close X of the view.</p>\n\n<h6 id=\"arg\">Arg:</h6>\n\n<blockquote>\n  <p>boolean (bool): True to show the close X always; False to hide unless mouse hovers over.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.refresh_close_pushbutton_stylesheet", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.refresh_close_pushbutton_stylesheet", "kind": "function", "doc": "<p>Refresh stylesheet of close pushbutton based on background color and visibility.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_scene_background", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_scene_background", "kind": "function", "doc": "<p>Set scene background color with QBrush.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>brush (QBrush)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">brush</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_scene_background_color", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_scene_background_color", "kind": "function", "doc": "<p>Set scene background color with color list.</p>\n\n<p>The init for CustomQGraphicsScene contains the ground truth for selectable background colors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>color (list):</strong>  Descriptor string and RGB int values. Example: [\"White\", 255, 255, 255].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.update_sync_zoom_by", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.update_sync_zoom_by", "kind": "function", "doc": "<p>[str] Update right-click menu of sync zoom by.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.pixmap_none_ify", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.pixmap_none_ify", "kind": "function", "doc": "<p>Return None if pixmap has no pixels.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>pixmap (QPixmap)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li>None if pixmap has no pixels; same pixmap if it has pixels</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixmap</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_positionChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_positionChanged", "kind": "function", "doc": "<p>Update the position of the split and the 1x1 pixel rectangle.</p>\n\n<p>Triggered when mouse is moved.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (QPoint):</strong>  The position of the mouse relative to widget.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_split", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_split", "kind": "function", "doc": "<p>Set the position of the split with x and y as proportion of base image's resolution.</p>\n\n<p>Sets split position using a proportion of x and y (by default of entire main pixmap; can be set to proportion of visible pixmap).\nTop left is x=0, y=0; bottom right is x=1, y=1.\nThis is needed to position the split without mouse movement from user (for example, to preview the effect of the transparency sliders in Butterfly Viewer)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's horizontal resolution.</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's vertical resolution.</li>\n<li><strong>ignore_lock (bool):</strong>  True to ignore the lock status of the split; False to adhere.</li>\n<li><strong>percent_of_visible (bool):</strong>  True to set split as proportion of visible area; False as proportion of the full image resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">y_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_lock</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">percent_of_visible</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.update_split", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.update_split", "kind": "function", "doc": "<p>Update the position of the split with mouse position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (QPoint):</strong>  Position of the mouse.</li>\n<li><strong>pos_is_global (bool):</strong>  True if given mouse position is relative to MdiChild; False if global position.</li>\n<li><strong>ignore_lock (bool):</strong>  True to ignore (bypass) the status of the split lock.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pos_is_global</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">ignore_lock</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.refresh_split_based_on_last_updated_point_of_split_on_scene_main", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.refresh_split_based_on_last_updated_point_of_split_on_scene_main", "kind": "function", "doc": "<p>Refresh the position of the split using the previously recorded split location.</p>\n\n<p>This is needed to maintain the position of the split during synchronized zooming and panning.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.update_split_given_global", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.update_split_given_global", "kind": "function", "doc": "<p>Update the position of the split based on given global mouse position.</p>\n\n<p>Convenience function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_global (QPoint):</strong>  The position of the mouse in global coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos_global</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_right_click_comment", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_right_click_comment", "kind": "function", "doc": "<p>Create an editable and movable comment on the scene of the main view at the given scene position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (QPointF):</strong>  position of the comment datum on the scene.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scene_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_right_click_ruler", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_right_click_ruler", "kind": "function", "doc": "<p>Create a movable ruler on the scene of the main view at the given scene position.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>scene_pos (QPointF):</strong>  The position of the ruler center on the scene.</li>\n<li><strong>relative_origin_position (str):</strong>  The position of the origin for coordinate system (\"topleft\" or \"bottomleft\").</li>\n<li><strong>unit (str):</strong>  The text for labeling units of ruler values.</li>\n<li><strong>px_per_unit (float):</strong>  The conversion for pixels to units. For example, 10 means 10 pixels-per-unit, meaning the ruler value will show 1 when measuring 10 pixels.</li>\n<li><strong>update_px_per_unit_on_existing (bool):</strong>  False always. (Legacy from past versions; future work should remove.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scene_pos</span>,</span><span class=\"param\">\t<span class=\"n\">relative_origin_position</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;px&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">px_per_unit</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_px_per_unit_on_existing</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_changed_px_per_unit", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_changed_px_per_unit", "kind": "function", "doc": "<p>Update the units and pixel-per-unit conversions of all rulers in main scene.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  The text for labeling units of ruler values.</li>\n<li><strong>px_per_unit (float):</strong>  The conversion for pixels to units. For example, 10 means 10 pixels-per-unit, meaning the ruler value will show 1 when measuring 10 pixels.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit</span>, </span><span class=\"param\"><span class=\"n\">px_per_unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_right_click_save_all_comments", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_right_click_save_all_comments", "kind": "function", "doc": "<p>Open a dialog window for user to save all existing comments on the main scene to .csv.</p>\n\n<p>Triggered from right-click menu on view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_right_click_load_comments", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_right_click_load_comments", "kind": "function", "doc": "<p>Open a dialog window for user to load comments to the main scene via .csv as saved previously.</p>\n\n<p>Triggered from right-click menu on view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_right_click_set_relative_origin_position", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_right_click_set_relative_origin_position", "kind": "function", "doc": "<p>Set orientation of the coordinate system for rulers by positioning the relative origin.</p>\n\n<h6 id=\"allows-users-to-switch-the-coordinate-orientation\">Allows users to switch the coordinate orientation:</h6>\n\n<blockquote>\n  <p>\"bottomleft\" for Cartesian-style (positive X right, positive Y up)\n  topleft\" for image-style (positive X right, positive Y down)</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>relative_origin_position (str):</strong>  The position of the origin for coordinate system (\"topleft\" or \"bottomleft\").</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">string</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.display_loading_grayout", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.display_loading_grayout", "kind": "function", "doc": "<p>Emit signal for showing/hiding a grayout screen to indicate loading sequences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show grayout; False to hide.</li>\n<li><strong>text (str):</strong>  The text to show on the grayout.</li>\n<li><strong>pseudo_load_time (float):</strong>  The delay (in seconds) to hide the grayout to give user feeling of action.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Loading...&#39;</span>, </span><span class=\"param\"><span class=\"n\">pseudo_load_time</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.update_mouse_rect", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.update_mouse_rect", "kind": "function", "doc": "<p>Update the position of red 1x1 outline at the pointer in the main scene.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (QPoint):</strong>  The position of the mouse on the widget. Set to None to make the function determine the position using the mouse global coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.signal_display_loading_grayout", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.signal_display_loading_grayout", "kind": "function", "doc": "<p>Emitted when comments are being saved or loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.became_closed", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.became_closed", "kind": "function", "doc": "<p>Emitted when SplitView is closed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.was_clicked_close_pushbutton", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.was_clicked_close_pushbutton", "kind": "function", "doc": "<p>Emitted when close pushbutton is clicked (pressed+released).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.was_set_global_transform_mode", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.was_set_global_transform_mode", "kind": "function", "doc": "<p>Emitted when transform mode is set for all views in right-click menu (passes it along).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.was_set_scene_background_color", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.was_set_scene_background_color", "kind": "function", "doc": "<p>Emitted when background color is set in right-click menu (passes it along).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.was_set_sync_zoom_by", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.was_set_sync_zoom_by", "kind": "function", "doc": "<p>Emitted when sync zoom option is set in right-click menu (passes it along).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.positionChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.positionChanged", "kind": "function", "doc": "<p>Emitted when mouse changes position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.sceneChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.sceneChanged", "kind": "function", "doc": "<p>Scene Changed <strong>Signal</strong>.</p>\n\n<p>Emitted whenever the |QGraphicsScene| content changes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.transformChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.transformChanged", "kind": "function", "doc": "<p>Transformed Changed <strong>Signal</strong>.</p>\n\n<p>Emitted whenever the |QGraphicsView| Transform matrix has been changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollChanged", "kind": "function", "doc": "<p>Scroll Changed <strong>Signal</strong>.</p>\n\n<p>Emitted whenever the scrollbar position or range has changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.connectSbarSignals", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.connectSbarSignals", "kind": "function", "doc": "<p>Connect to scrollbar changed signals.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>slot</strong>:  slot to connect scrollbar signals to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.pixmap_main_topleft", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.pixmap_main_topleft", "kind": "variable", "doc": "<p>The currently viewed |QPixmap| (<em>QPixmap</em>).</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_opacity_base", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_opacity_base", "kind": "function", "doc": "<p>Set transparency of base image.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_opacity_topright", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_opacity_topright", "kind": "function", "doc": "<p>Set transparency of top-right of sliding overlay.</p>\n\n<p>Allows users to see base image underneath.\nProvide enhanced integration and comparison of images (for example, blending raking light with color).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_opacity_bottomright", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_opacity_bottomright", "kind": "function", "doc": "<p>Set transparency of bottom-right of sliding overlay.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_opacity_bottomleft", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_opacity_bottomleft", "kind": "function", "doc": "<p>Set transparency of bottom-left of sliding overlay.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>percent (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.moveEvent", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.moveEvent", "kind": "function", "doc": "<p>Override move event of frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.resizeEvent", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.resizeEvent", "kind": "function", "doc": "<p>Override resize event of frame to ensure scene is also resized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.resize_scene", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.resize_scene", "kind": "function", "doc": "<p>Resize the scene to allow image to be panned just before the main pixmap leaves the viewport.</p>\n\n<p>This is needed to expand the scene so that users can pan the pixmap such that its edges are at the center of the view.\nThis changes the default behavior, which limits the scene to the bounds of the pixmap, thereby blocking users \nfrom panning outside the bounds of the pixmap, which can feel abrupt and restrictive.\nThis takes care of preventing users from panning too far away from the pixmap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_transform_mode_smooth_on", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_transform_mode_smooth_on", "kind": "function", "doc": "<p>Set transform mode to smooth (interpolate) when zoomfactor is &gt;= 1.0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_transform_mode_smooth_off", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_transform_mode_smooth_off", "kind": "function", "doc": "<p>Set transform mode to non-smooth (non-interpolated) when zoomfactor is &gt;= 1.0.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_transform_mode_smooth", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_transform_mode_smooth", "kind": "function", "doc": "<p>Set transform mode when zoomfactor is &gt;= 1.0.</p>\n\n<p>Convenience function.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to smooth (interpolate); False to fast (not interpolate).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.on_transformChanged", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.on_transformChanged", "kind": "function", "doc": "<p>Resize scene if image transform is changed (for example, when zoomed).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.handDragging", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.handDragging", "kind": "variable", "doc": "<p>bool: The hand dragging state.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollState", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollState", "kind": "variable", "doc": "<p>tuple: The percentage of scene extents\n<em>(sceneWidthPercent, sceneHeightPercent)</em></p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.zoomFactor", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.zoomFactor", "kind": "variable", "doc": "<p>float: The zoom scale factor.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.refresh_transform_mode", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.refresh_transform_mode", "kind": "function", "doc": "<p>Refresh zoom of all views, taking into account the transform mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_pixmap_transform_from_scale", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_pixmap_transform_from_scale", "kind": "function", "doc": "<p>Set a given pixmap transform based on scale (zoom).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pixmap_item</span>, </span><span class=\"param\"><span class=\"n\">scale</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollToTop", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollToTop", "kind": "function", "doc": "<p>Scroll to top of image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollToBottom", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollToBottom", "kind": "function", "doc": "<p>Scroll to bottom of image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollToBegin", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollToBegin", "kind": "function", "doc": "<p>Scroll to left side of image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scrollToEnd", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scrollToEnd", "kind": "function", "doc": "<p>Scroll to right side of image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.centerView", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.centerView", "kind": "function", "doc": "<p>Center image in view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.enableScrollBars", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.enableScrollBars", "kind": "function", "doc": "<p>Set visiblility of the view's scrollbars.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bool enable</strong>:  True to enable the scrollbars</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.enableHandDrag", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.enableHandDrag", "kind": "function", "doc": "<p>Set whether dragging the view with the hand cursor is allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bool enable</strong>:  True to enable hand dragging</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.zoomIn", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.zoomIn", "kind": "function", "doc": "<p>Zoom in on image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.zoomOut", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.zoomOut", "kind": "function", "doc": "<p>Zoom out on image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.actualSize", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.actualSize", "kind": "function", "doc": "<p>Change zoom to show image at actual size.</p>\n\n<p>(image pixel is equal to screen pixel)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.fitToWindow", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.fitToWindow", "kind": "function", "doc": "<p>Fit image within view.</p>\n\n<p>If the viewport is wider than the main pixmap, then fit the pixmap to height; if the viewport is narrower, then fit the pixmap to width</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.fitWidth", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.fitWidth", "kind": "function", "doc": "<p>Fit image width to view width.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.fitHeight", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.fitHeight", "kind": "function", "doc": "<p>Fit image height to view height.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.imageWidth", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.imageWidth", "kind": "variable", "doc": "<p>int: Width of base (main) image pixmap.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.imageHeight", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.imageHeight", "kind": "variable", "doc": "<p>int: Height of base (main) image pixmap.</p>\n"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.handleWheelNotches", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.handleWheelNotches", "kind": "function", "doc": "<p>Handle wheel notch event from underlying |QGraphicsView|.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>float notches</strong>:  Mouse wheel notches</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">notches</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.closeEvent", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.closeEvent", "kind": "function", "doc": "<p>Overriden in order to disconnect scrollbar signals before\nclosing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>QEvent event</strong>:  instance of a |QEvent|</li>\n</ul>\n\n<p>If this isn't done Python crashes!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.scaleImage", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.scaleImage", "kind": "function", "doc": "<p>Scale image by factor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>float factor</strong>:  either new <code>zoomFactor</code> or amount to scale\n                 current <code>zoomFactor</code></p></li>\n<li><p><strong>bool combine</strong>:  if <code>True</code> scales the current\n                 <code>zoomFactor</code> by factor.  Otherwise\n                 just sets <code>zoomFactor</code> to factor</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">factor</span>, </span><span class=\"param\"><span class=\"n\">combine</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.dumpTransform", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.dumpTransform", "kind": "function", "doc": "<p>Dump view transform to stdout.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.create_mouse_rect", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.create_mouse_rect", "kind": "function", "doc": "<p>Create a red 1x1 outline at the pointer in the main scene.</p>\n\n<p>Indicates to the user the size and position of the pixel over which the mouse is hovering.\nHelps to understand the position of individual pixels and their scale at the current zoom.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_splitview.SplitView.set_mouse_rect_visible", "modulename": "butterfly_viewer.aux_splitview", "qualname": "SplitView.set_mouse_rect_visible", "kind": "function", "doc": "<p>Set the visibilty of the red 1x1 outline at the pointer in the main scene.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show 1x1 outline; False to hide.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_trackers", "modulename": "butterfly_viewer.aux_trackers", "kind": "module", "doc": "<p>Trackers and signalers for SplitView.</p>\n\n<p>Not intended as a script. Used in Butterfly Viewer and Registrator.</p>\n\n<p>Creates widgets to track and signal events in SplitView, primarily for mouse movement.</p>\n"}, {"fullname": "butterfly_viewer.aux_trackers.EventTracker", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTracker", "kind": "class", "doc": "<p>Track and signal mouse movement and clicks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>widget (QWidget or child class thereof):</strong>  Widget of which to track and signal mouse events.</li>\n</ul>\n", "bases": "PyQt5.QtCore.QObject"}, {"fullname": "butterfly_viewer.aux_trackers.EventTracker.eventFilter", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTracker.eventFilter", "kind": "function", "doc": "<p>eventFilter(self, QObject, QEvent) -> bool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_trackers.EventTrackerSplitBypassDeadzone", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTrackerSplitBypassDeadzone", "kind": "class", "doc": "<p>Limit the reported global position of the mouse to within a widget's bounds.</p>\n\n<p>This class is intended to help track mouse movement in the deadzones along the SplitView's borders.\nThese deadzones fix the issue of resize handles appearing in QMdiArea; however, \nthese deadzones hide the mouse from the view, so the mouse must be separately tracked \nto ensure the split is updated.\nThe mouse position is bounded to include only positions within the widget to fix issues with positions \nreported as outside the bounds.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>widget (QWidget or child class thereof):</strong>  Widget of which to track and signal mouse events (intended to be the resize_deadzone in SplitView).</li>\n</ul>\n", "bases": "PyQt5.QtCore.QObject"}, {"fullname": "butterfly_viewer.aux_trackers.EventTrackerSplitBypassDeadzone.eventFilter", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTrackerSplitBypassDeadzone.eventFilter", "kind": "function", "doc": "<p>Override eventFilter to limit the reported position of mouse movement.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>source (PyQt source)</li>\n<li>event (PyQt event)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li>The base eventFilter using source and event (passes it along to PyQt).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_trackers.EventTrackerSplitBypassDeadzone.limit_mouse_position_to_within_widget_bounds", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTrackerSplitBypassDeadzone.limit_mouse_position_to_within_widget_bounds", "kind": "function", "doc": "<p>Return a given global mouse position which is limited to within the widget's borders.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos (QPoint):</strong>  The position of the mouse in global coordinates.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>pos_global_bounded (QPoint):</strong>  The position of the mouse in global coordinates limited (\"floored\") to within the widget borders.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_trackers.EventTrackerSplitBypassInterface", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTrackerSplitBypassInterface", "kind": "class", "doc": "<p>Track mouse events while over widgets (for example, interface elements).</p>\n\n<p>Needed to track the split of the sliding overlay while mouse is hovering over interface widgets.\nPrevents the split from skipping and stopping when entering and exiting interface elements.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>widget (QWidget or child class thereof):</strong>  The widget over which to track mouse movement.</li>\n</ul>\n", "bases": "PyQt5.QtCore.QObject"}, {"fullname": "butterfly_viewer.aux_trackers.EventTrackerSplitBypassInterface.eventFilter", "modulename": "butterfly_viewer.aux_trackers", "qualname": "EventTrackerSplitBypassInterface.eventFilter", "kind": "function", "doc": "<p>\"Override event filter to emit mouse movement and button press events.</p>\n\n<p>See parent method for full documentation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>source (PyQt source)</li>\n<li>event (PyQt event)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li>The base eventFilter using source and event (passes it along to PyQt).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing", "modulename": "butterfly_viewer.aux_viewing", "kind": "module", "doc": "<p>QGraphicsView with synchronized pan and zoom functionality.</p>\n\n<p>Not intended as a script.</p>\n\n<p>Creates the base (main) view of the SplitView for the Butterfly Viewer and Registrator.</p>\n\n<h6 id=\"credits\">Credits:</h6>\n\n<blockquote>\n  <p>PyQt MDI Image Viewer by tpgit (<a href=\"http://tpgit.github.io/MDIImageViewer/\">http://tpgit.github.io/MDIImageViewer/</a>) for sync pan and zoom.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView", "kind": "class", "doc": "<p>Extend QGraphicsView for synchronous panning and zooming between multiple instances.</p>\n\n<h6 id=\"extends-qgraphicsview\">Extends QGraphicsView:</h6>\n\n<blockquote>\n  <p>Pan and zoom signals.\n  Scrolling operations and mouse wheel zooming.\n  Mouse tracking.\n  View shortcuts (for example, centering the view).</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>scene (QGraphicsScene)</li>\n<li>parent (QWidget or child class thereof)</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QGraphicsView"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.transformChanged", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.transformChanged", "kind": "function", "doc": "<p>Transformed Changed <strong>Signal</strong>.</p>\n\n<p>Emitted whenever the |QGraphicsView| Transform matrix has been\nchanged.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollChanged", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollChanged", "kind": "function", "doc": "<p>Scroll Changed <strong>Signal</strong>.</p>\n\n<p>Emitted whenever the scrollbar position or range has changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.wheelNotches", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.wheelNotches", "kind": "function", "doc": "<p>Wheel Notches <strong>Signal</strong> (<em>float</em>).</p>\n\n<p>Emitted whenever the mouse wheel has been rolled. A wheelnotch is\nequal to wheel delta / 240</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.connectSbarSignals", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.connectSbarSignals", "kind": "function", "doc": "<p>Connect to scrollbar changed signals to synchronize panning.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>slot</strong>:  slot to connect scrollbar signals to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">slot</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.disconnectSbarSignals", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.disconnectSbarSignals", "kind": "function", "doc": "<p>Disconnect from scrollbar changed signals.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.handDragging", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.handDragging", "kind": "variable", "doc": "<p>Hand dragging state (<em>bool</em>)</p>\n"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollState", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollState", "kind": "variable", "doc": "<p>Tuple of percentage of scene extents\n<em>(sceneWidthPercent, sceneHeightPercent)</em></p>\n"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.zoomFactor", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.zoomFactor", "kind": "variable", "doc": "<p>Zoom scale factor (<em>float</em>).</p>\n"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.mouseMoveEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.mouseMoveEvent", "kind": "function", "doc": "<p>mouseMoveEvent(self, QMouseEvent)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.wheelEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.wheelEvent", "kind": "function", "doc": "<p>Overrides the wheelEvent to handle zooming.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>QWheelEvent wheelEvent</strong>:  instance of |QWheelEvent|</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">wheelEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.keyReleaseEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.keyReleaseEvent", "kind": "function", "doc": "<p>Overrides to make sure key release passed on to other classes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>QKeyEvent keyEvent</strong>:  instance of |QKeyEvent|</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keyEvent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.mousePressEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.mousePressEvent", "kind": "function", "doc": "<p>Overrides to allow left-click for panning and limit repeat right-clicks.</p>\n\n<p>Enables hand dragging (panning) of the view by clicking left mouse button.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>event: [PtQt event].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.mouseReleaseEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.mouseReleaseEvent", "kind": "function", "doc": "<p>Overrides to disable panning left-click for panning and limit repeat right-clicks.</p>\n\n<p>Undoes the actions from mousePressEvent (release of mouse buttons).</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>event: [PtQt event].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.dragEnterEvent", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.dragEnterEvent", "kind": "function", "doc": "<p>Ignore drag event, thus passing it along to the parent widget.</p>\n\n<p>Allows for the drag-and-drop function in digitaltwin_imageviewer.py by \npassing drag events to the underlying MDI area.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>event : [PyQt event]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.checkTransformChanged", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.checkTransformChanged", "kind": "function", "doc": "<p>Return True if view transform has changed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.clearTransformChanges", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.clearTransformChanges", "kind": "function", "doc": "<p>Reset view transform changed info.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollToTop", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollToTop", "kind": "function", "doc": "<p>Scroll view to top.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollToBottom", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollToBottom", "kind": "function", "doc": "<p>Scroll view to bottom.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollToBegin", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollToBegin", "kind": "function", "doc": "<p>Scroll view to left edge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.scrollToEnd", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.scrollToEnd", "kind": "function", "doc": "<p>Scroll view to right edge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.centerView", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.centerView", "kind": "function", "doc": "<p>Center view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.enableScrollBars", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.enableScrollBars", "kind": "function", "doc": "<p>Set visibility of the view's scrollbars.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bool enable</strong>:  True to enable the scrollbars</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.enableHandDrag", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.enableHandDrag", "kind": "function", "doc": "<p>Set whether dragging the view with the hand cursor is allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bool enable</strong>:  True to enable hand dragging</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.aux_viewing.SynchableGraphicsView.dumpTransform", "modulename": "butterfly_viewer.aux_viewing", "qualname": "SynchableGraphicsView.dumpTransform", "kind": "function", "doc": "<p>Dump the transform t to stdout.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>t</strong>:  the transform to dump</li>\n<li><strong>str padding</strong>:  each line is preceded by padding</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer", "modulename": "butterfly_viewer.butterfly_viewer", "kind": "module", "doc": "<p>Multi-image viewer for comparing images with synchronized zooming, panning, and sliding overlays.</p>\n\n<h6 id=\"intended-to-be-run-as-a-script\">Intended to be run as a script:</h6>\n\n<blockquote>\n  <p>$ python butterfly_viewer.py</p>\n</blockquote>\n\n<h6 id=\"features\">Features:</h6>\n\n<blockquote>\n  <p>Image windows have synchronized zoom and pan by default, but can be optionally unsynced.\n  Image windows will auto-arrange and can be set as a grid, column, or row. \n  Users can create sliding overlays up to 2x2 and adjust their transparencies.</p>\n</blockquote>\n\n<h6 id=\"credits\">Credits:</h6>\n\n<blockquote>\n  <p>PyQt MDI Image Viewer by tpgit (<a href=\"http://tpgit.github.io/MDIImageViewer/\">http://tpgit.github.io/MDIImageViewer/</a>) for sync pan and zoom.</p>\n</blockquote>\n"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild", "kind": "class", "doc": "<p>Extends SplitView for use in Butterfly Viewer.</p>\n\n<p>Extends SplitView with keyboard shortcut to lock the position of the split \nin the Butterfly Viewer.</p>\n\n<p>Overrides SplitView by checking split lock status before updating split.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>See parent method for full documentation.</li>\n</ul>\n", "bases": "aux_splitview.SplitView"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild.sync_this_zoom", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild.sync_this_zoom", "kind": "variable", "doc": "<p>bool: Setting of whether to sync this by zoom (or not).</p>\n"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild.sync_this_pan", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild.sync_this_pan", "kind": "variable", "doc": "<p>bool: Setting of whether to sync this by pan (or not).</p>\n"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild.toggle_lock_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild.toggle_lock_split", "kind": "function", "doc": "<p>Toggle the split lock.</p>\n\n<p>Toggles the status of the split lock (e.g., if locked, it will become unlocked; vice versa).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild.update_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild.update_split", "kind": "function", "doc": "<p>Update the position of the split while considering the status of the split lock.</p>\n\n<p>See parent method for full documentation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">pos_is_global</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">ignore_lock</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.SplitViewMdiChild.enterEvent", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "SplitViewMdiChild.enterEvent", "kind": "function", "doc": "<p>Pass along enter event to parent method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow", "kind": "class", "doc": "<p>View multiple images with split-effect and synchronized panning and zooming.</p>\n\n<p>Extends QMainWindow as main window of Butterfly Viewer with user interface:</p>\n\n<ul>\n<li>Create sliding overlays.</li>\n<li>Adjust sliding overlay transparencies.</li>\n<li>Change viewer settings.</li>\n</ul>\n", "bases": "PyQt5.QtWidgets.QMainWindow"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.copy_view", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.copy_view", "kind": "function", "doc": "<p>Screenshot MultiViewMainWindow and copy to clipboard as image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.save_view", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.save_view", "kind": "function", "doc": "<p>Screenshot MultiViewMainWindow and open Save dialog to save screenshot as image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.display_loading_grayout", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.display_loading_grayout", "kind": "function", "doc": "<p>Show/hide grayout screen for loading sequences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show grayout; False to hide.</li>\n<li><strong>text (str):</strong>  The text to show on the grayout.</li>\n<li><strong>pseudo_load_time (float):</strong>  The delay (in seconds) to hide the grayout to give users a feeling of action.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Loading...&#39;</span>, </span><span class=\"param\"><span class=\"n\">pseudo_load_time</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.display_dragged_grayout", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.display_dragged_grayout", "kind": "function", "doc": "<p>Show/hide grayout screen for drag-and-drop sequences.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show grayout; False to hide.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_last_remaining_subwindow_was_closed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_last_remaining_subwindow_was_closed", "kind": "function", "doc": "<p>Show instructions label of MDIArea.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_first_subwindow_was_opened", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_first_subwindow_was_opened", "kind": "function", "doc": "<p>Hide instructions label of MDIArea.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.show_interface", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.show_interface", "kind": "function", "doc": "<p>Show/hide interface elements for sliding overlay creator and transparencies.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to show interface; False to hide.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.show_interface_on", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.show_interface_on", "kind": "function", "doc": "<p>Show interface elements for sliding overlay creator and transparencies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.show_interface_off", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.show_interface_off", "kind": "function", "doc": "<p>Hide interface elements for sliding overlay creator and transparencies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggle_interface", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggle_interface", "kind": "function", "doc": "<p>Toggle visibilty of interface elements for sliding overlay creator and transparencies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_stopsync_pushbutton", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_stopsync_pushbutton", "kind": "function", "doc": "<p>Set state of synchronous zoom/pan and appearance of corresponding interface button.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to enable synchronized zoom/pan; False to disable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggle_fullscreen", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggle_fullscreen", "kind": "function", "doc": "<p>Toggle fullscreen state of app.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_fullscreen_on", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_fullscreen_on", "kind": "function", "doc": "<p>Enable fullscreen of MultiViewMainWindow.</p>\n\n<p>Moves MDIArea to secondary window and makes it fullscreen.\nShows interim widget in main window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_fullscreen_off", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_fullscreen_off", "kind": "function", "doc": "<p>Disable fullscreen of MultiViewMainWindow.</p>\n\n<p>Removes interim widget in main window. \nReturns MDIArea to normal (non-fullscreen) view on main window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_fullscreen", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_fullscreen", "kind": "function", "doc": "<p>Enable/disable fullscreen of MultiViewMainWindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to enable fullscreen; False to disable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.update_window_highlight", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.update_window_highlight", "kind": "function", "doc": "<p>Update highlight of subwindows in MDIArea.</p>\n\n<p>Input window should be the subwindow which is active.\nAll other subwindow(s) will be shown no highlight.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow to show highlight and indicate as active.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.update_window_labels", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.update_window_labels", "kind": "function", "doc": "<p>Update labels of subwindows in MDIArea.</p>\n\n<p>Input window should be the subwindow which is active.\nAll other subwindow(s) will be shown no labels.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow to show label(s) of image(s) and indicate as active.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_window_close_pushbuttons_always_visible", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_window_close_pushbuttons_always_visible", "kind": "function", "doc": "<p>Enable/disable the always-on visiblilty of the close X on each subwindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow.</li>\n<li><strong>boolean (bool):</strong>  True to show the close X always; False to hide unless mouse hovers over.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_window_mouse_rect_visible", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_window_mouse_rect_visible", "kind": "function", "doc": "<p>Enable/disable the visiblilty of the red 1x1 outline at the pointer</p>\n\n<p>Outline shows the relative size of a pixel in the active subwindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow.</li>\n<li><strong>boolean (bool):</strong>  True to show 1x1 outline; False to hide.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.auto_tile_subwindows_on_close", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.auto_tile_subwindows_on_close", "kind": "function", "doc": "<p>Tile the subwindows of MDIArea using previously used tile method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.update_mdi_buttons", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.update_mdi_buttons", "kind": "function", "doc": "<p>Update the interface button 'Split Lock' based on the status of the split (locked/unlocked) in the given window.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_single_window_transform_mode_smooth", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_single_window_transform_mode_smooth", "kind": "function", "doc": "<p>Set the transform mode of a given subwindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The subwindow.</li>\n<li><strong>boolean (bool):</strong>  True to smooth (interpolate); False to fast (not interpolate).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_all_window_transform_mode_smooth", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_all_window_transform_mode_smooth", "kind": "function", "doc": "<p>Set the transform mode of all subwindows. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boolean (bool):</strong>  True to smooth (interpolate); False to fast (not interpolate).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boolean</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_all_background_color", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_all_background_color", "kind": "function", "doc": "<p>Set the background color of all subwindows. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>color (list):</strong>  Descriptor string and RGB int values. Example: [\"White\", 255, 255, 255].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_all_sync_zoom_by", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_all_sync_zoom_by", "kind": "function", "doc": "<p>[str] Set the method by which to sync zoom all windows.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">by</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.info_button_clicked", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.info_button_clicked", "kind": "function", "doc": "<p>Trigger when info button is clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.show_about", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.show_about", "kind": "function", "doc": "<p>Show about box.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.loadFile", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.loadFile", "kind": "function", "doc": "<p>Load an individual image or sliding overlay into new subwindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename_main_topleft (str):</strong>  The image filepath of the main image to be viewed; the basis of the sliding overlay (main; topleft)</li>\n<li><strong>filename_topright (str):</strong>  The image filepath for top-right of the sliding overlay (set None to exclude)</li>\n<li><strong>filename_bottomleft (str):</strong>  The image filepath for bottom-left of the sliding overlay (set None to exclude)</li>\n<li><strong>filename_bottomright (str):</strong>  The image filepath for bottom-right of the sliding overlay (set None to exclude)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename_main_topleft</span>,</span><span class=\"param\">\t<span class=\"n\">filename_topright</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename_bottomleft</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filename_bottomright</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.load_from_dragged_and_dropped_file", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.load_from_dragged_and_dropped_file", "kind": "function", "doc": "<p>Load an individual image (convenience function \u2014 e.g., from a single emitted single filename).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename_main_topleft</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createMdiChild", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createMdiChild", "kind": "function", "doc": "<p>Create new viewing widget for an individual image or sliding overlay to be placed in a new subwindow.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pixmap (QPixmap):</strong>  The main image to be viewed; the basis of the sliding overlay (main; topleft)</li>\n<li><strong>filename_main_topleft (str):</strong>  The image filepath of the main image.</li>\n<li><strong>pixmap_topright (QPixmap):</strong>  The top-right image of the sliding overlay (set None to exclude).</li>\n<li><strong>pixmap_bottomleft (QPixmap):</strong>  The bottom-left image of the sliding overlay (set None to exclude).</li>\n<li><strong>pixmap_bottomright (QPixmap):</strong>  The bottom-right image of the sliding overlay (set None to exclude).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<ul>\n<li><strong>child (SplitViewMdiChild):</strong>  The viewing widget instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pixmap</span>,</span><span class=\"param\">\t<span class=\"n\">filename_main_topleft</span>,</span><span class=\"param\">\t<span class=\"n\">pixmap_topright</span>,</span><span class=\"param\">\t<span class=\"n\">pixmap_bottomleft</span>,</span><span class=\"param\">\t<span class=\"n\">pixmap_bottomright</span>,</span><span class=\"param\">\t<span class=\"n\">transform_mode_smooth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_create_splitview", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_create_splitview", "kind": "function", "doc": "<p>Load a sliding overlay using the filepaths of the current images in the sliding overlay creator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.fit_to_window", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.fit_to_window", "kind": "function", "doc": "<p>Fit the view of the active subwindow (if it exists).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.update_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.update_split", "kind": "function", "doc": "<p>Update the position of the split of the active subwindow (if it exists) relying on the global mouse coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.lock_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.lock_split", "kind": "function", "doc": "<p>Lock the position of the overlay split of active subwindow and set relevant interface elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.unlock_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.unlock_split", "kind": "function", "doc": "<p>Unlock the position of the overlay split of active subwindow and set relevant interface elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_split", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_split", "kind": "function", "doc": "<p>Set the position of the split of the active subwindow as percent of base image's resolution.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's horizontal resolution.</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion (0-1) of the base image's vertical resolution.</li>\n<li><strong>apply_to_all (bool):</strong>  True to set all subwindow splits; False to set only the active subwindow.</li>\n<li><strong>ignore_lock (bool):</strong>  True to ignore the lock status of the split; False to adhere.</li>\n<li><strong>percent_of_visible (bool):</strong>  True to set split as proportion of visible area; False as proportion of the full image resolution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">y_percent</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">apply_to_all</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_lock</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">percent_of_visible</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_split_from_slider", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_split_from_slider", "kind": "function", "doc": "<p>Set the position of the split of the active subwindow to the center of the visible area of the sliding overlay (convenience function).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_split_from_manager", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_split_from_manager", "kind": "function", "doc": "<p>Set the position of the split of the active subwindow as percent of base image's resolution (convenience function).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion of the base image's horizontal resolution (0-1).</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion of the base image's vertical resolution (0-1).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_percent</span>, </span><span class=\"param\"><span class=\"n\">y_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.set_and_lock_split_from_manager", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.set_and_lock_split_from_manager", "kind": "function", "doc": "<p>Set and lock the position of the split of the active subwindow as percent of base image's resolution (convenience function).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x_percent (float):</strong>  The position of the split as a proportion of the base image's horizontal resolution (0-1).</li>\n<li><strong>y_percent (float):</strong>  The position of the split as a proportion of the base image's vertical resolution (0-1).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_percent</span>, </span><span class=\"param\"><span class=\"n\">y_percent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.shortcut_shift_x_was_activated_on_mdichild", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.shortcut_shift_x_was_activated_on_mdichild", "kind": "function", "doc": "<p>Update interface button for split lock based on lock status of active subwindow.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_scrollChanged", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_scrollChanged", "kind": "function", "doc": "<p>Refresh position of split of all subwindows based on their respective last position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_subwindow_closed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_subwindow_closed", "kind": "function", "doc": "<p>Record that a subwindow was closed upon the closing of a subwindow.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_mouse_leaved", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_mouse_leaved", "kind": "function", "doc": "<p>Update displayed coordinates of mouse as N/A upon the mouse leaving the subwindow area.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_positionChanged", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_positionChanged", "kind": "function", "doc": "<p>Update displayed coordinates of mouse on the active subwindow using global coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_slider_opacity_base_changed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_slider_opacity_base_changed", "kind": "function", "doc": "<p>Set transparency of base of sliding overlay of active subwindow.</p>\n\n<p>Triggered upon change in interface transparency slider.\nTemporarily sets position of split to the center of the visible area to give user a preview of the transparency effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_slider_opacity_topright_changed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_slider_opacity_topright_changed", "kind": "function", "doc": "<p>Set transparency of top-right of sliding overlay of active subwindow.</p>\n\n<p>Triggered upon change in interface transparency slider.\nTemporarily sets position of split to the center of the visible area to give user a preview of the transparency effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_slider_opacity_bottomright_changed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_slider_opacity_bottomright_changed", "kind": "function", "doc": "<p>Set transparency of bottom-right of sliding overlay of active subwindow.</p>\n\n<p>Triggered upon change in interface transparency slider.\nTemporarily sets position of split to the center of the visible area to give user a preview of the transparency effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.on_slider_opacity_bottomleft_changed", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.on_slider_opacity_bottomleft_changed", "kind": "function", "doc": "<p>Set transparency of bottom-left of sliding overlay of active subwindow.</p>\n\n<p>Triggered upon change in interface transparency slider.\nTemporarily sets position of split to the center of the visible area to give user a preview of the transparency effect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float,int):</strong>  The transparency as percent opacity, where 100 is opaque (not transparent) and 0 is transparent (0-100).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.update_sliders", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.update_sliders", "kind": "function", "doc": "<p>Update interface transparency sliders upon subwindow activating using the subwindow transparency values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (QMdiSubWindow):</strong>  The active subwindow.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createMappedAction", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createMappedAction", "kind": "function", "doc": "<p>Create |QAction| that is mapped via methodName to call.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>icon</strong>:  icon associated with |QAction|</li>\n<li><strong>str text</strong>:  the |QAction| descriptive text</li>\n<li><strong>QObject parent</strong>:  the parent |QObject|</li>\n<li><strong>QKeySequence shortcut</strong>:  the shortcut |QKeySequence|</li>\n<li><strong>str methodName</strong>:  name of method to call when |QAction| is\ntriggered</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">icon</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">shortcut</span>, </span><span class=\"param\"><span class=\"n\">methodName</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createActions", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createActions", "kind": "function", "doc": "<p>Create actions used in menus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createMenus", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createMenus", "kind": "function", "doc": "<p>Create menus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.updateMenus", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.updateMenus", "kind": "function", "doc": "<p>Update menus.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.updateRecentFileActions", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.updateRecentFileActions", "kind": "function", "doc": "<p>Update recent file menu items.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.updateWindowMenu", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.updateWindowMenu", "kind": "function", "doc": "<p>Update the Window menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createStatusBarLabel", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createStatusBarLabel", "kind": "function", "doc": "<p>Create status bar label.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>int stretch</strong>:  stretch factor</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stretch</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.createStatusBar", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.createStatusBar", "kind": "function", "doc": "<p>Create status bar.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.activeMdiChild", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.activeMdiChild", "kind": "variable", "doc": "<p>Get active MDI child (<code>SplitViewMdiChild</code> or <em>None</em>).</p>\n"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.closeEvent", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.closeEvent", "kind": "function", "doc": "<p>Overrides close event to save application settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>QEvent event</strong>:  instance of |QEvent|</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.mappedImageViewerAction", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.mappedImageViewerAction", "kind": "function", "doc": "<p>Perform action mapped to <code>aux_splitview.SplitView</code>\nmethodName.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str methodName</strong>:  method to call</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">methodName</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggleSynchPan", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggleSynchPan", "kind": "function", "doc": "<p>Toggle synchronized subwindow panning.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.panChanged", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.panChanged", "kind": "function", "doc": "<p>Synchronize subwindow pans.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggleSynchZoom", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggleSynchZoom", "kind": "function", "doc": "<p>Toggle synchronized subwindow zooming.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.zoomChanged", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.zoomChanged", "kind": "function", "doc": "<p>Synchronize subwindow zooms.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.synchPan", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.synchPan", "kind": "function", "doc": "<p>Synch panning of all subwindowws to the same as <em>fromViewer</em>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fromViewer</strong>:  <code>SplitViewMdiChild</code> that initiated synching</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fromViewer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.synchZoom", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.synchZoom", "kind": "function", "doc": "<p>Synch zoom of all subwindowws to the same as <em>fromViewer</em>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fromViewer</strong>:  <code>SplitViewMdiChild</code> that initiated synching</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fromViewer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.activateSubwindowSystemMenu", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.activateSubwindowSystemMenu", "kind": "function", "doc": "<p>Activate current subwindow's System Menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.openRecentFile", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.openRecentFile", "kind": "function", "doc": "<p>Open a recent file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str filename_main_topleft</strong>:  filename_main_topleft to view</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename_main_topleft</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.open", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.open", "kind": "function", "doc": "<p>Handle the open action.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.open_multiple", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.open_multiple", "kind": "function", "doc": "<p>Handle the open multiple action.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggleScrollbars", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggleScrollbars", "kind": "function", "doc": "<p>Toggle subwindow scrollbar visibility.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.toggleStatusbar", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.toggleStatusbar", "kind": "function", "doc": "<p>Toggle status bar visibility.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.about", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.about", "kind": "function", "doc": "<p>Display About dialog box.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.subWindowActivated", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.subWindowActivated", "kind": "function", "doc": "<p>Handle |QMdiSubWindow| activated signal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>|QMdiSubWindow| window</strong>:  |QMdiSubWindow| that was just\nactivated</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.setActiveSubWindow", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.setActiveSubWindow", "kind": "function", "doc": "<p>Set active |QMdiSubWindow|.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>|QMdiSubWindow| window</strong>:  |QMdiSubWindow| to activate</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.updateStatusBar", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.updateStatusBar", "kind": "function", "doc": "<p>Update status bar.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.switchLayoutDirection", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.switchLayoutDirection", "kind": "function", "doc": "<p>Switch MDI subwindow layout direction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.saveDialogState", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.saveDialogState", "kind": "function", "doc": "<p>Save dialog state, position &amp; size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>|QDialog| dialog</strong>:  dialog to save state of</li>\n<li><strong>str groupName</strong>:  |QSettings| group name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dialog</span>, </span><span class=\"param\"><span class=\"n\">groupName</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.restoreDialogState", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.restoreDialogState", "kind": "function", "doc": "<p>Restore dialog state, position &amp; size.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str groupName</strong>:  |QSettings| group name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dialog</span>, </span><span class=\"param\"><span class=\"n\">groupName</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.writeSettings", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.writeSettings", "kind": "function", "doc": "<p>Write application settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.readSettings", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.readSettings", "kind": "function", "doc": "<p>Read application settings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.MultiViewMainWindow.updateRecentFileSettings", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "MultiViewMainWindow.updateRecentFileSettings", "kind": "function", "doc": "<p>Update recent file list setting.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str filename_main_topleft</strong>:  filename_main_topleft to add or remove from recent file\nlist</li>\n<li><strong>bool delete</strong>:  if True then filename_main_topleft removed, otherwise added</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename_main_topleft</span>, </span><span class=\"param\"><span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "butterfly_viewer.butterfly_viewer.main", "modulename": "butterfly_viewer.butterfly_viewer", "qualname": "main", "kind": "function", "doc": "<p>Run MultiViewMainWindow as main app.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>app (QApplication):</strong>  Starts and holds the main event loop of application.</li>\n<li><strong>mainWin (MultiViewMainWindow):</strong>  The main window.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();